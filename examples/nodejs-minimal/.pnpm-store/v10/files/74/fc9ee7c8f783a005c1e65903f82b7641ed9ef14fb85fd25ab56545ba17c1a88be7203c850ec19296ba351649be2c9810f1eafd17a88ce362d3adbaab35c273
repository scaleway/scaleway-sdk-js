import randomName from "@scaleway/random-name";
import { resolveOneOf, isJSONObject, unmarshalArrayOfObject, unmarshalDate } from "@scaleway/sdk-client";
const unmarshalEndpointPrivateNetworkDetails = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id
  };
};
const unmarshalEndpointPublicNetworkDetails = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPublicNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpoint = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    dnsRecord: data.dns_record,
    id: data.id,
    port: data.port,
    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0,
    publicNetwork: data.public_network ? unmarshalEndpointPublicNetworkDetails(data.public_network) : void 0
  };
};
const unmarshalInstanceSnapshotSchedule = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceSnapshotSchedule' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled,
    frequencyHours: data.frequency_hours,
    lastRun: unmarshalDate(data.last_run),
    nextUpdate: unmarshalDate(data.next_update),
    retentionDays: data.retention_days
  };
};
const unmarshalVolume = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    sizeBytes: data.size_bytes,
    type: data.type
  };
};
const unmarshalInstance = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: unmarshalDate(data.created_at),
    endpoints: unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    id: data.id,
    name: data.name,
    nodeAmount: data.node_amount,
    nodeType: data.node_type,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    snapshotSchedule: data.snapshot_schedule ? unmarshalInstanceSnapshotSchedule(data.snapshot_schedule) : void 0,
    status: data.status,
    tags: data.tags,
    version: data.version,
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalSnapshot = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: unmarshalDate(data.created_at),
    expiresAt: unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    nodeType: data.node_type,
    region: data.region,
    sizeBytes: data.size_bytes,
    status: data.status,
    updatedAt: unmarshalDate(data.updated_at),
    volumeType: data.volume_type
  };
};
const unmarshalUserRole = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UserRole' failed as data isn't a dictionary.`
    );
  }
  return {
    anyDatabase: data.any_database,
    databaseName: data.database_name,
    role: data.role
  };
};
const unmarshalUser = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'User' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    roles: unmarshalArrayOfObject(data.roles, unmarshalUserRole)
  };
};
const unmarshalListInstancesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instances: unmarshalArrayOfObject(data.instances, unmarshalInstance),
    totalCount: data.total_count
  };
};
const unmarshalNodeTypeVolumeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    chunkSizeBytes: data.chunk_size_bytes,
    description: data.description,
    maxSizeBytes: data.max_size_bytes,
    minSizeBytes: data.min_size_bytes,
    type: data.type
  };
};
const unmarshalNodeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    availableVolumeTypes: unmarshalArrayOfObject(
      data.available_volume_types,
      unmarshalNodeTypeVolumeType
    ),
    beta: data.beta,
    description: data.description,
    disabled: data.disabled,
    instanceRange: data.instance_range,
    memoryBytes: data.memory_bytes,
    name: data.name,
    stockStatus: data.stock_status,
    vcpus: data.vcpus
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListUsersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    users: unmarshalArrayOfObject(data.users, unmarshalUser)
  };
};
const unmarshalVersion = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Version' failed as data isn't a dictionary.`
    );
  }
  return {
    endOfLifeAt: unmarshalDate(data.end_of_life_at),
    version: data.version
  };
};
const unmarshalListVersionsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: unmarshalArrayOfObject(data.versions, unmarshalVersion)
  };
};
const marshalEndpointSpecPrivateNetworkDetails = (request, defaults) => ({
  private_network_id: request.privateNetworkId
});
const marshalEndpointSpecPublicNetworkDetails = (request, defaults) => ({});
const marshalEndpointSpec = (request, defaults) => ({
  ...resolveOneOf([
    {
      param: "public_network",
      value: request.publicNetwork !== void 0 ? marshalEndpointSpecPublicNetworkDetails(
        request.publicNetwork
      ) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetworkDetails(
        request.privateNetwork
      ) : void 0
    }
  ])
});
const marshalCreateEndpointRequest = (request, defaults) => ({
  endpoint: marshalEndpointSpec(request.endpoint),
  instance_id: request.instanceId
});
const marshalVolume = (request, defaults) => ({
  size_bytes: request.sizeBytes,
  type: request.type
});
const marshalCreateInstanceRequest = (request, defaults) => ({
  endpoints: request.endpoints !== void 0 ? request.endpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,
  name: request.name || randomName("mgdb"),
  node_amount: request.nodeAmount,
  node_type: request.nodeType,
  password: request.password,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  user_name: request.userName,
  version: request.version,
  volume: request.volume !== void 0 ? marshalVolume(request.volume) : void 0
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  instance_id: request.instanceId,
  name: request.name
});
const marshalCreateUserRequest = (request, defaults) => ({
  name: request.name,
  password: request.password
});
const marshalRestoreSnapshotRequest = (request, defaults) => ({
  instance_name: request.instanceName,
  node_amount: request.nodeAmount,
  node_type: request.nodeType,
  volume_type: request.volumeType
});
const marshalUserRole = (request, defaults) => ({
  role: request.role,
  ...resolveOneOf([
    { param: "database_name", value: request.databaseName },
    { param: "any_database", value: request.anyDatabase }
  ])
});
const marshalSetUserRoleRequest = (request, defaults) => ({
  roles: request.roles !== void 0 ? request.roles.map((elt) => marshalUserRole(elt)) : void 0,
  user_name: request.userName
});
const marshalUpdateInstanceRequest = (request, defaults) => ({
  is_snapshot_schedule_enabled: request.isSnapshotScheduleEnabled,
  name: request.name,
  snapshot_schedule_frequency_hours: request.snapshotScheduleFrequencyHours,
  snapshot_schedule_retention_days: request.snapshotScheduleRetentionDays,
  tags: request.tags
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalUpdateUserRequest = (request, defaults) => ({
  password: request.password
});
const marshalUpgradeInstanceRequest = (request, defaults) => ({
  ...resolveOneOf([
    { param: "volume_size_bytes", value: request.volumeSizeBytes }
  ])
});
export {
  marshalCreateEndpointRequest,
  marshalCreateInstanceRequest,
  marshalCreateSnapshotRequest,
  marshalCreateUserRequest,
  marshalRestoreSnapshotRequest,
  marshalSetUserRoleRequest,
  marshalUpdateInstanceRequest,
  marshalUpdateSnapshotRequest,
  marshalUpdateUserRequest,
  marshalUpgradeInstanceRequest,
  unmarshalEndpoint,
  unmarshalInstance,
  unmarshalListInstancesResponse,
  unmarshalListNodeTypesResponse,
  unmarshalListSnapshotsResponse,
  unmarshalListUsersResponse,
  unmarshalListVersionsResponse,
  unmarshalSnapshot,
  unmarshalUser
};
