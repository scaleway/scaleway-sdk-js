"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const content_gen = require("./content.gen.cjs");
const marshalling_gen = require("./marshalling.gen.cjs");
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends sdkClient.API {
  /**
   * Locality of this API.
   * type âˆˆ {'zone','region','global','unspecified'}
   */
  static LOCALITY = sdkClient.toApiLocality({
    zones: ["fr-par-1", "fr-par-2", "nl-ams-1"]
  });
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["search", request.search]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List baremetal servers for project.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => sdkClient.enrichForPagination("servers", this.pageOfListServers, request);
  /**
   * Get a specific baremetal server. Get the server associated with the given ID.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of Server
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForServer = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getServer,
    request,
    options
  );
  getServerBackup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/backups`
    },
    marshalling_gen.unmarshalBackup
  );
  updateServerBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/backups`
    },
    marshalling_gen.unmarshalBackup
  );
  pageOfListSubscribableServerOptions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/subscribable-server-options`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListSubscribableServerOptionsResponse
  );
  /**
   * List subscribable server options. List subscribable options associated to the given server ID.
   *
   * @param request - The request {@link ListSubscribableServerOptionsRequest}
   * @returns A Promise of ListSubscribableServerOptionsResponse
   */
  listSubscribableServerOptions = (request) => sdkClient.enrichForPagination(
    "serverOptions",
    this.pageOfListSubscribableServerOptions,
    request
  );
  /**
   * Subscribe server option. Subscribe option for the given server ID.
   *
   * @param request - The request {@link SubscribeServerOptionRequest}
   * @returns A Promise of Service
   */
  subscribeServerOption = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSubscribeServerOptionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/subscribe-server-option`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Create a baremetal server. Create a new baremetal server. The order return you a service ID to follow the provisionning status you could call GetService.
   *
   * @param request - The request {@link CreateServerRequest}
   * @returns A Promise of Service
   */
  createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Subscribe storage server option. Subscribe storage option for the given server ID.
   *
   * @param request - The request {@link SubscribeStorageOptionsRequest}
   * @returns A Promise of SubscribeStorageOptionsResponse
   */
  subscribeStorageOptions = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSubscribeStorageOptionsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/subscribe-storage-options`
    },
    marshalling_gen.unmarshalSubscribeStorageOptionsResponse
  );
  /**
   * Update a baremetal server. Update the server associated with the given ID.
   *
   * @param request - The request {@link UpdateServerRequest}
   * @returns A Promise of Server
   */
  updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  updateServerTags = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerTagsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/tags`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Reboot a baremetal server. Reboot the server associated with the given ID, use boot param to reboot in rescue.
   *
   * @param request - The request {@link RebootServerRequest}
   */
  rebootServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/reboot`
  });
  /**
   * Start a baremetal server. Start the server associated with the given ID.
   *
   * @param request - The request {@link StartServerRequest}
   */
  startServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/start`
  });
  /**
   * Stop a baremetal server. Stop the server associated with the given ID.
   *
   * @param request - The request {@link StopServerRequest}
   */
  stopServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/stop`
  });
  /**
   * Delete a baremetal server. Delete the server associated with the given ID.
   *
   * @param request - The request {@link DeleteServerRequest}
   */
  deleteServer = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
  });
  pageOfListServerEvents = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/events`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListServerEventsResponse
  );
  /**
   * List server events. List events associated to the given server ID.
   *
   * @param request - The request {@link ListServerEventsRequest}
   * @returns A Promise of ListServerEventsResponse
   */
  listServerEvents = (request) => sdkClient.enrichForPagination("events", this.pageOfListServerEvents, request);
  pageOfListServerDisks = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/disks`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListServerDisksResponse
  );
  /**
   * List server disks. List disks associated to the given server ID.
   *
   * @param request - The request {@link ListServerDisksRequest}
   * @returns A Promise of ListServerDisksResponse
   */
  listServerDisks = (request) => sdkClient.enrichForPagination("disks", this.pageOfListServerDisks, request);
  getOrderedService = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ordered-services/${sdkClient.validatePathParam("orderedServiceId", request.orderedServiceId)}`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Get a specific service. Get the service associated with the given ID.
   *
   * @param request - The request {@link GetServiceRequest}
   * @returns A Promise of Service
   */
  getService = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services/${sdkClient.validatePathParam("serviceId", request.serviceId)}`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Delete a specific service. Delete the service associated with the given ID.
   *
   * @param request - The request {@link DeleteServiceRequest}
   * @returns A Promise of Service
   */
  deleteService = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services/${sdkClient.validatePathParam("serviceId", request.serviceId)}`
    },
    marshalling_gen.unmarshalService
  );
  pageOfListServices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListServicesResponse
  );
  /**
   * List services.
   *
   * @param request - The request {@link ListServicesRequest}
   * @returns A Promise of ListServicesResponse
   */
  listServices = (request = {}) => sdkClient.enrichForPagination("services", this.pageOfListServices, request);
  /**
   * Install a baremetal server. Install an OS on the server associated with the given ID.
   *
   * @param request - The request {@link InstallServerRequest}
   * @returns A Promise of ServerInstall
   */
  installServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalInstallServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/install`
    },
    marshalling_gen.unmarshalServerInstall
  );
  /**
   * Get a specific server installation status. Get the server installation status associated with the given server ID.
   *
   * @param request - The request {@link GetServerInstallRequest}
   * @returns A Promise of ServerInstall
   */
  getServerInstall = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/install`
    },
    marshalling_gen.unmarshalServerInstall
  );
  /**
   * Waits for {@link ServerInstall} to be in a final state.
   *
   * @param request - The request {@link GetServerInstallRequest}
   * @param options - The waiting options
   * @returns A Promise of ServerInstall
   */
  waitForServerInstall = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.SERVER_INSTALL_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getServerInstall,
    request,
    options
  );
  /**
   * Cancels the current (running) server installation. Cancels the current server installation associated with the given server ID.
   *
   * @param request - The request {@link CancelServerInstallRequest}
   */
  cancelServerInstall = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/cancel-install`
  });
  /**
   * Get server default partitioning. Get the server default partitioning schema associated with the given server ID and OS ID.
   *
   * @param request - The request {@link GetServerDefaultPartitioningRequest}
   * @returns A Promise of ServerDefaultPartitioning
   */
  getServerDefaultPartitioning = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/partitioning/${sdkClient.validatePathParam("osId", request.osId)}`
    },
    marshalling_gen.unmarshalServerDefaultPartitioning
  );
  /**
     * Start BMC (Baseboard Management Controller) access for a given baremetal server. Start BMC (Baseboard Management Controller) access associated with the given ID.
  The BMC (Baseboard Management Controller) access is available one hour after the installation of the server.
     *
     * @param request - The request {@link StartBMCAccessRequest}
     */
  startBMCAccess = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalStartBMCAccessRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/bmc-access`
  });
  /**
   * Get BMC (Baseboard Management Controller) access for a given baremetal server. Get the BMC (Baseboard Management Controller) access associated with the given ID.
   *
   * @param request - The request {@link GetBMCAccessRequest}
   * @returns A Promise of BMCAccess
   */
  getBMCAccess = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/bmc-access`
    },
    marshalling_gen.unmarshalBMCAccess
  );
  /**
   * Waits for {@link BMCAccess} to be in a final state.
   *
   * @param request - The request {@link GetBMCAccessRequest}
   * @param options - The waiting options
   * @returns A Promise of BMCAccess
   */
  waitForBMCAccess = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.BMC_ACCESS_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getBMCAccess,
    request,
    options
  );
  /**
   * Stop BMC (Baseboard Management Controller) access for a given baremetal server. Stop BMC (Baseboard Management Controller) access associated with the given ID.
   *
   * @param request - The request {@link StopBMCAccessRequest}
   */
  stopBMCAccess = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/bmc-access`
  });
  pageOfListOffers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers`,
      urlParams: sdkClient.urlParams(
        ["available_only", request.availableOnly],
        ["catalog", request.catalog],
        ["commercial_range", request.commercialRange],
        ["is_failover_block", request.isFailoverBlock],
        ["is_failover_ip", request.isFailoverIp],
        ["is_rpn_san", request.isRpnSan],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        [
          "sold_in",
          request.soldIn && request.soldIn.length > 0 ? request.soldIn.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListOffersResponse
  );
  /**
   * List offers. List all available server offers.
   *
   * @param request - The request {@link ListOffersRequest}
   * @returns A Promise of ListOffersResponse
   */
  listOffers = (request = {}) => sdkClient.enrichForPagination("offers", this.pageOfListOffers, request);
  /**
   * Get offer. Return specific offer for the given ID.
   *
   * @param request - The request {@link GetOfferRequest}
   * @returns A Promise of Offer
   */
  getOffer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers/${sdkClient.validatePathParam("offerId", request.offerId)}`,
      urlParams: sdkClient.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalOffer
  );
  pageOfListOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["server_id", request.serverId],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListOSResponse
  );
  /**
   * List all available OS that can be install on a baremetal server.
   *
   * @param request - The request {@link ListOSRequest}
   * @returns A Promise of ListOSResponse
   */
  listOS = (request) => sdkClient.enrichForPagination("os", this.pageOfListOS, request);
  /**
   * Get an OS with a given ID. Return specific OS for the given ID.
   *
   * @param request - The request {@link GetOSRequest}
   * @returns A Promise of OS
   */
  getOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os/${sdkClient.validatePathParam("osId", request.osId)}`,
      urlParams: sdkClient.urlParams(
        ["project_id", request.projectId],
        ["server_id", request.serverId]
      )
    },
    marshalling_gen.unmarshalOS
  );
  /**
   * Update reverse of ip. Update reverse of ip associated with the given ID.
   *
   * @param request - The request {@link UpdateReverseRequest}
   * @returns A Promise of IP
   */
  updateReverse = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateReverseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/reverses/${sdkClient.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Order failover IPs. Order X failover IPs.
   *
   * @param request - The request {@link CreateFailoverIPsRequest}
   * @returns A Promise of CreateFailoverIPsResponse
   */
  createFailoverIPs = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFailoverIPsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips`
    },
    marshalling_gen.unmarshalCreateFailoverIPsResponse
  );
  /**
   * Attach failovers on baremetal server. Attach failovers on the server associated with the given ID.
   *
   * @param request - The request {@link AttachFailoverIPsRequest}
   */
  attachFailoverIPs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalAttachFailoverIPsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/attach`
  });
  /**
   * Detach failovers on baremetal server. Detach failovers on the server associated with the given ID.
   *
   * @param request - The request {@link DetachFailoverIPsRequest}
   */
  detachFailoverIPs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalDetachFailoverIPsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/detach`
  });
  /**
   * Attach a failover IP to a MAC address.
   *
   * @param request - The request {@link AttachFailoverIPToMacAddressRequest}
   * @returns A Promise of IP
   */
  attachFailoverIPToMacAddress = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachFailoverIPToMacAddressRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${sdkClient.validatePathParam("ipId", request.ipId)}/attach-to-mac-address`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Detach a failover IP from a MAC address.
   *
   * @param request - The request {@link DetachFailoverIPFromMacAddressRequest}
   * @returns A Promise of IP
   */
  detachFailoverIPFromMacAddress = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${sdkClient.validatePathParam("ipId", request.ipId)}/detach-from-mac-address`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Delete a failover server. Delete the failover associated with the given ID.
   *
   * @param request - The request {@link DeleteFailoverIPRequest}
   */
  deleteFailoverIP = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${sdkClient.validatePathParam("ipId", request.ipId)}`
  });
  pageOfListFailoverIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips`,
      urlParams: sdkClient.urlParams(
        ["only_available", request.onlyAvailable],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["search", request.search]
      )
    },
    marshalling_gen.unmarshalListFailoverIPsResponse
  );
  /**
   * List failovers for project. List failovers servers for project.
   *
   * @param request - The request {@link ListFailoverIPsRequest}
   * @returns A Promise of ListFailoverIPsResponse
   */
  listFailoverIPs = (request = {}) => sdkClient.enrichForPagination("failoverIps", this.pageOfListFailoverIPs, request);
  /**
   * Get a specific baremetal server. Get the server associated with the given ID.
   *
   * @param request - The request {@link GetFailoverIPRequest}
   * @returns A Promise of FailoverIP
   */
  getFailoverIP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${sdkClient.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalFailoverIP
  );
  /**
   * Get remaining quota.
   *
   * @param request - The request {@link GetRemainingQuotaRequest}
   * @returns A Promise of GetRemainingQuotaResponse
   */
  getRemainingQuota = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/remaining-quota`,
      urlParams: sdkClient.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalGetRemainingQuotaResponse
  );
  /**
   * Get raid. Return raid for the given server ID.
   *
   * @param request - The request {@link GetRaidRequest}
   * @returns A Promise of Raid
   */
  getRaid = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/raid`
    },
    marshalling_gen.unmarshalRaid
  );
  /**
   * Update RAID. Update RAID associated with the given server ID.
   *
   * @param request - The request {@link UpdateRaidRequest}
   */
  updateRaid = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalUpdateRaidRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/update-raid`
  });
  /**
   * Start in rescue baremetal server. Start in rescue the server associated with the given ID.
   *
   * @param request - The request {@link StartRescueRequest}
   * @returns A Promise of Rescue
   */
  startRescue = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalStartRescueRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/rescue`
    },
    marshalling_gen.unmarshalRescue
  );
  /**
   * Get rescue information. Return rescue information for the given server ID.
   *
   * @param request - The request {@link GetRescueRequest}
   * @returns A Promise of Rescue
   */
  getRescue = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/rescue`
    },
    marshalling_gen.unmarshalRescue
  );
  /**
   * Stop rescue on baremetal server. Stop rescue on the server associated with the given ID.
   *
   * @param request - The request {@link StopRescueRequest}
   */
  stopRescue = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/rescue`
  });
}
class BillingAPI extends sdkClient.API {
  pageOfListInvoices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/invoices`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListInvoicesResponse
  );
  listInvoices = (request = {}) => sdkClient.enrichForPagination("invoices", this.pageOfListInvoices, request);
  getInvoice = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/invoices/${sdkClient.validatePathParam("invoiceId", request.invoiceId)}`
    },
    marshalling_gen.unmarshalInvoice
  );
  downloadInvoice = (request) => this.client.fetch({
    method: "GET",
    path: `/dedibox/v1/invoices/${sdkClient.validatePathParam("invoiceId", request.invoiceId)}/download`,
    urlParams: sdkClient.urlParams(["dl", 1]),
    responseType: "blob"
  });
  pageOfListRefunds = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/refunds`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRefundsResponse
  );
  listRefunds = (request = {}) => sdkClient.enrichForPagination("refunds", this.pageOfListRefunds, request);
  getRefund = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/refunds/${sdkClient.validatePathParam("refundId", request.refundId)}`
    },
    marshalling_gen.unmarshalRefund
  );
  downloadRefund = (request) => this.client.fetch({
    method: "GET",
    path: `/dedibox/v1/refunds/${sdkClient.validatePathParam("refundId", request.refundId)}/download`,
    urlParams: sdkClient.urlParams(["dl", 1]),
    responseType: "blob"
  });
  canOrder = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/can-order`,
      urlParams: sdkClient.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalCanOrderResponse
  );
}
class IPv6BlockAPI extends sdkClient.API {
  /**
     * Get IPv6 block quota. Get IPv6 block quota with the given project ID.
  /48 one per organization.
  /56 link to your number of server.
  /64 link to your number of failover IP.
     *
     * @param request - The request {@link IPv6BlockApiGetIPv6BlockQuotasRequest}
     * @returns A Promise of GetIPv6BlockQuotasResponse
     */
  getIPv6BlockQuotas = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-block-quotas`,
      urlParams: sdkClient.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalGetIPv6BlockQuotasResponse
  );
  /**
   * Create IPv6 block for baremetal server. Create IPv6 block associated with the given project ID.
   *
   * @param request - The request {@link IPv6BlockApiCreateIPv6BlockRequest}
   * @returns A Promise of IPv6Block
   */
  createIPv6Block = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/ipv6-block`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * Get a specific IPv6 block. Get the IPv6 block associated with the given ID.
   *
   * @param request - The request {@link IPv6BlockApiGetIPv6BlockRequest}
   * @returns A Promise of IPv6Block
   */
  getIPv6Block = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-block`,
      urlParams: sdkClient.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
     * Update IPv6 block. Update DNS associated to IPv6 block.
  If DNS is used, minimum of 2 is necessary and maximum of 5 (no duplicate).
     *
     * @param request - The request {@link IPv6BlockApiUpdateIPv6BlockRequest}
     * @returns A Promise of IPv6Block
     */
  updateIPv6Block = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiUpdateIPv6BlockRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/ipv6-blocks/${sdkClient.validatePathParam("blockId", request.blockId)}`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * Delete IPv6 block. Delete IPv6 block subnet with the given ID.
   *
   * @param request - The request {@link IPv6BlockApiDeleteIPv6BlockRequest}
   */
  deleteIPv6Block = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/ipv6-blocks/${sdkClient.validatePathParam("blockId", request.blockId)}`
  });
  /**
     * Create IPv6 block subnet. Create IPv6 block subnet for the given IP ID.
  /48 could create subnet in /56 (quota link to your number of server).
  /56 could create subnet in /64 (quota link to your number of failover IP).
     *
     * @param request - The request {@link IPv6BlockApiCreateIPv6BlockSubnetRequest}
     * @returns A Promise of IPv6Block
     */
  createIPv6BlockSubnet = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockSubnetRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/ipv6-blocks/${sdkClient.validatePathParam("blockId", request.blockId)}/subnets`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * List available IPv6 block subnets. List all available IPv6 block subnets for given IP ID.
   *
   * @param request - The request {@link IPv6BlockApiListIPv6BlockSubnetsAvailableRequest}
   * @returns A Promise of ListIPv6BlockSubnetsAvailableResponse
   */
  listIPv6BlockSubnetsAvailable = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-blocks/${sdkClient.validatePathParam("blockId", request.blockId)}/subnets`
    },
    marshalling_gen.unmarshalListIPv6BlockSubnetsAvailableResponse
  );
}
class RpnAPI extends sdkClient.API {
  pageOfListRpnServerCapabilities = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn/server-capabilities`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnServerCapabilitiesResponse
  );
  listRpnServerCapabilities = (request = {}) => sdkClient.enrichForPagination(
    "servers",
    this.pageOfListRpnServerCapabilities,
    request
  );
  getRpnStatus = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn/status`,
      urlParams: sdkClient.urlParams(
        ["project_id", request.projectId],
        ["rpnv1_group_id", request.rpnv1GroupId],
        ["rpnv2_group_id", request.rpnv2GroupId]
      )
    },
    marshalling_gen.unmarshalGetRpnStatusResponse
  );
}
class RpnSanAPI extends sdkClient.API {
  pageOfListRpnSans = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnSansResponse
  );
  listRpnSans = (request = {}) => sdkClient.enrichForPagination("rpnSans", this.pageOfListRpnSans, request);
  getRpnSan = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}`
    },
    marshalling_gen.unmarshalRpnSan
  );
  /**
   * Waits for {@link RpnSan} to be in a final state.
   *
   * @param request - The request {@link RpnSanApiGetRpnSanRequest}
   * @param options - The waiting options
   * @returns A Promise of RpnSan
   */
  waitForRpnSan = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.RPN_SAN_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getRpnSan,
    request,
    options
  );
  deleteRpnSan = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}`
  });
  createRpnSan = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnSanApiCreateRpnSanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpn-sans`
    },
    marshalling_gen.unmarshalService
  );
  listIps = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}/ips`,
      urlParams: sdkClient.urlParams(["type", request.type])
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  addIp = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnSanApiAddIpRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}/ips`
  });
  removeIp = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnSanApiRemoveIpRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "DELETE",
    path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}/ips`
  });
  listAvailableIps = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${sdkClient.validatePathParam("rpnSanId", request.rpnSanId)}/available-ips`,
      urlParams: sdkClient.urlParams(["type", request.type])
    },
    marshalling_gen.unmarshalListIpsResponse
  );
}
class RpnV1API extends sdkClient.API {
  pageOfListRpnGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnGroupsResponse
  );
  listRpnGroups = (request = {}) => sdkClient.enrichForPagination("rpnGroups", this.pageOfListRpnGroups, request);
  getRpnGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  createRpnGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiCreateRpnGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv1/groups`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  deleteRpnGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
  });
  updateRpnGroupName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiUpdateRpnGroupNameRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  pageOfListRpnGroupMembers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnGroupMembersResponse
  );
  listRpnGroupMembers = (request) => sdkClient.enrichForPagination("members", this.pageOfListRpnGroupMembers, request);
  rpnGroupInvite = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV1ApiRpnGroupInviteRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/invite`
  });
  leaveRpnGroup = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV1ApiLeaveRpnGroupRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/leave`
  });
  addRpnGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiAddRpnGroupMembersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  deleteRpnGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiDeleteRpnGroupMembersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/dedibox/v1/rpnv1/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  pageOfListRpnCapableServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/capable-servers`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnCapableServersResponse
  );
  listRpnCapableServers = (request = {}) => sdkClient.enrichForPagination("servers", this.pageOfListRpnCapableServers, request);
  pageOfListRpnCapableSanServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/capable-san-servers`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnCapableSanServersResponse
  );
  listRpnCapableSanServers = (request = {}) => sdkClient.enrichForPagination(
    "sanServers",
    this.pageOfListRpnCapableSanServers,
    request
  );
  pageOfListRpnInvites = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/invites`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListRpnInvitesResponse
  );
  listRpnInvites = (request = {}) => sdkClient.enrichForPagination("members", this.pageOfListRpnInvites, request);
  acceptRpnInvite = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/rpnv1/invites/${sdkClient.validatePathParam("memberId", request.memberId)}/accept`
  });
  refuseRpnInvite = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/rpnv1/invites/${sdkClient.validatePathParam("memberId", request.memberId)}/refuse`
  });
}
class RpnV2API extends sdkClient.API {
  pageOfListRpnV2Groups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnV2GroupsResponse
  );
  listRpnV2Groups = (request = {}) => sdkClient.enrichForPagination("rpnGroups", this.pageOfListRpnV2Groups, request);
  pageOfListRpnV2Members = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListRpnV2MembersResponse
  );
  listRpnV2Members = (request) => sdkClient.enrichForPagination("members", this.pageOfListRpnV2Members, request);
  getRpnV2Group = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  /**
   * Waits for {@link RpnV2Group} to be in a final state.
   *
   * @param request - The request {@link RpnV2ApiGetRpnV2GroupRequest}
   * @param options - The waiting options
   * @returns A Promise of RpnV2Group
   */
  waitForRpnV2Group = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.RPN_V2_GROUP_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getRpnV2Group,
    request,
    options
  );
  createRpnV2Group = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV2ApiCreateRpnV2GroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv2/groups`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  deleteRpnV2Group = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
  });
  updateRpnV2GroupName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV2ApiUpdateRpnV2GroupNameRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  addRpnV2Members = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiAddRpnV2MembersRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`
  });
  deleteRpnV2Members = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiDeleteRpnV2MembersRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "DELETE",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/members`
  });
  pageOfListRpnV2CapableResources = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/capable`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnV2CapableResourcesResponse
  );
  listRpnV2CapableResources = (request = {}) => sdkClient.enrichForPagination(
    "servers",
    this.pageOfListRpnV2CapableResources,
    request
  );
  pageOfListRpnV2GroupLogs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/logs`,
      urlParams: sdkClient.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListRpnV2GroupLogsResponse
  );
  listRpnV2GroupLogs = (request) => sdkClient.enrichForPagination("logs", this.pageOfListRpnV2GroupLogs, request);
  updateRpnV2VlanForMembers = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "PATCH",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/vlan`
  });
  enableRpnV2GroupCompatibility = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/enable-compatibility`
  });
  disableRpnV2GroupCompatibility = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${sdkClient.validatePathParam("groupId", request.groupId)}/disable-compatibility`
  });
}
exports.API = API;
exports.BillingAPI = BillingAPI;
exports.IPv6BlockAPI = IPv6BlockAPI;
exports.RpnAPI = RpnAPI;
exports.RpnSanAPI = RpnSanAPI;
exports.RpnV1API = RpnV1API;
exports.RpnV2API = RpnV2API;
