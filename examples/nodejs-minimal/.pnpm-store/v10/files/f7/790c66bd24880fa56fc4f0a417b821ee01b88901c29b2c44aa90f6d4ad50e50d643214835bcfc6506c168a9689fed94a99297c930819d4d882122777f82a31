"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const content_gen = require("./content.gen.cjs");
const marshalling_gen = require("./marshalling.gen.cjs");
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends sdkClient.API {
  /**
   * Locality of this API.
   * type âˆˆ {'zone','region','global','unspecified'}
   */
  static LOCALITY = sdkClient.toApiLocality({
    regions: ["fr-par"]
  });
  /**
   * Get filesystem details. Retrieve all properties and current status of a specific filesystem identified by its ID.
   *
   * @param request - The request {@link GetFileSystemRequest}
   * @returns A Promise of FileSystem
   */
  getFileSystem = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/filesystems/${sdkClient.validatePathParam("filesystemId", request.filesystemId)}`
    },
    marshalling_gen.unmarshalFileSystem
  );
  /**
   * Waits for {@link FileSystem} to be in a final state.
   *
   * @param request - The request {@link GetFileSystemRequest}
   * @param options - The waiting options
   * @returns A Promise of FileSystem
   */
  waitForFileSystem = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.FILE_SYSTEM_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getFileSystem,
    request,
    options
  );
  pageOfListFileSystems = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/filesystems`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListFileSystemsResponse
  );
  /**
   * List all filesystems. Retrieve all filesystems in the specified region. By default, the filesystems listed are ordered by creation date in ascending order. This can be modified using the `order_by` field.
   *
   * @param request - The request {@link ListFileSystemsRequest}
   * @returns A Promise of ListFileSystemsResponse
   */
  listFileSystems = (request = {}) => sdkClient.enrichForPagination("filesystems", this.pageOfListFileSystems, request);
  pageOfListAttachments = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/attachments`,
      urlParams: sdkClient.urlParams(
        ["filesystem_id", request.filesystemId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["resource_id", request.resourceId],
        ["resource_type", request.resourceType],
        ["zone", request.zone]
      )
    },
    marshalling_gen.unmarshalListAttachmentsResponse
  );
  /**
     * List filesystems attachments. List all existing attachments in a specified region.
  By default, the attachments listed are ordered by creation date in ascending order. This can be modified using the `order_by` field.
     *
     * @param request - The request {@link ListAttachmentsRequest}
     * @returns A Promise of ListAttachmentsResponse
     */
  listAttachments = (request = {}) => sdkClient.enrichForPagination("attachments", this.pageOfListAttachments, request);
  /**
   * Create a new filesystem. To create a new filesystem, you must specify a name, a size, and a project ID.
   *
   * @param request - The request {@link CreateFileSystemRequest}
   * @returns A Promise of FileSystem
   */
  createFileSystem = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFileSystemRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/filesystems`
    },
    marshalling_gen.unmarshalFileSystem
  );
  /**
   * Delete a detached filesystem. You must specify the `filesystem_id` of the filesystem you want to delete.
   *
   * @param request - The request {@link DeleteFileSystemRequest}
   */
  deleteFileSystem = (request) => this.client.fetch({
    method: "DELETE",
    path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/filesystems/${sdkClient.validatePathParam("filesystemId", request.filesystemId)}`
  });
  /**
   * Update filesystem properties. Update the technical details of a filesystem, such as its name, tags or its new size.
   *
   * @param request - The request {@link UpdateFileSystemRequest}
   * @returns A Promise of FileSystem
   */
  updateFileSystem = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateFileSystemRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/file/v1alpha1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/filesystems/${sdkClient.validatePathParam("filesystemId", request.filesystemId)}`
    },
    marshalling_gen.unmarshalFileSystem
  );
}
exports.API = API;
