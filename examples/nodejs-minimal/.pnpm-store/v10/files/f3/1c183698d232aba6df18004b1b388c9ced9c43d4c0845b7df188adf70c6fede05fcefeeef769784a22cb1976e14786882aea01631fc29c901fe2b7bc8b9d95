import { API as ParentAPI } from '@scaleway/sdk-client';
import type { Discount, DownloadInvoiceRequest, ExportInvoicesRequest, GetInvoiceRequest, Invoice, ListConsumptionsRequest, ListConsumptionsResponse, ListDiscountsRequest, ListDiscountsResponse, ListInvoicesRequest, ListInvoicesResponse, ListTaxesRequest, ListTaxesResponse, RedeemCouponRequest } from './types.gen';
/**
 * Billing API.

This API allows you to manage and query your Scaleway billing and consumption.
 */
export declare class API extends ParentAPI {
    protected pageOfListConsumptions: (request?: Readonly<ListConsumptionsRequest>) => Promise<ListConsumptionsResponse>;
    /**
     * Get monthly consumption. Consumption allows you to retrieve your past or current consumption cost, by project or category.
     *
     * @param request - The request {@link ListConsumptionsRequest}
     * @returns A Promise of ListConsumptionsResponse
     */
    listConsumptions: (request?: Readonly<ListConsumptionsRequest>) => Promise<ListConsumptionsResponse> & {
        all: () => Promise<import("./types.gen").ListConsumptionsResponseConsumption[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").ListConsumptionsResponseConsumption[], void, void>;
    };
    protected pageOfListTaxes: (request?: Readonly<ListTaxesRequest>) => Promise<ListTaxesResponse>;
    /**
     * Get monthly consumption taxes. Consumption Tax allows you to retrieve your past or current tax charges, by project or category.
     *
     * @param request - The request {@link ListTaxesRequest}
     * @returns A Promise of ListTaxesResponse
     */
    listTaxes: (request?: Readonly<ListTaxesRequest>) => Promise<ListTaxesResponse> & {
        all: () => Promise<import("./types.gen").ListTaxesResponseTax[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").ListTaxesResponseTax[], void, void>;
    };
    protected pageOfListInvoices: (request?: Readonly<ListInvoicesRequest>) => Promise<ListInvoicesResponse>;
    /**
     * List invoices. List all your invoices, filtering by `start_date` and `invoice_type`. Each invoice has its own ID.
     *
     * @param request - The request {@link ListInvoicesRequest}
     * @returns A Promise of ListInvoicesResponse
     */
    listInvoices: (request?: Readonly<ListInvoicesRequest>) => Promise<ListInvoicesResponse> & {
        all: () => Promise<Invoice[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Invoice[], void, void>;
    };
    /**
     * Export invoices. Export invoices in a CSV file.
     *
     * @param request - The request {@link ExportInvoicesRequest}
     * @returns A Promise of Blob
     */
    exportInvoices: (request?: Readonly<ExportInvoicesRequest>) => Promise<Blob>;
    /**
     * Get an invoice. Get a specific invoice, specified by its ID.
     *
     * @param request - The request {@link GetInvoiceRequest}
     * @returns A Promise of Invoice
     */
    getInvoice: (request: Readonly<GetInvoiceRequest>) => Promise<Invoice>;
    /**
     * Download an invoice. Download a specific invoice, specified by its ID.
     *
     * @param request - The request {@link DownloadInvoiceRequest}
     * @returns A Promise of Blob
     */
    downloadInvoice: (request: Readonly<DownloadInvoiceRequest>) => Promise<Blob>;
    protected pageOfListDiscounts: (request?: Readonly<ListDiscountsRequest>) => Promise<ListDiscountsResponse>;
    /**
     * List discounts. List all discounts for your Organization and usable categories, products, offers, references, regions and zones where the discount can be applied. As a reseller:
  - If you do not specify an `organization_id` you will list the discounts applied to your own Organization and your customers
  - If you indicate your `organization_id` you will list only the discounts applied to your Organization
  - If you indicate `the organization_id` of one of your customers, you will list the discounts applied to their Organization.
     *
     * @param request - The request {@link ListDiscountsRequest}
     * @returns A Promise of ListDiscountsResponse
     */
    listDiscounts: (request?: Readonly<ListDiscountsRequest>) => Promise<ListDiscountsResponse> & {
        all: () => Promise<Discount[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Discount[], void, void>;
    };
    /**
     * Redeem coupon. Redeem a coupon given the related code.
     *
     * @param request - The request {@link RedeemCouponRequest}
     * @returns A Promise of Discount
     */
    redeemCoupon: (request: Readonly<RedeemCouponRequest>) => Promise<Discount>;
}
