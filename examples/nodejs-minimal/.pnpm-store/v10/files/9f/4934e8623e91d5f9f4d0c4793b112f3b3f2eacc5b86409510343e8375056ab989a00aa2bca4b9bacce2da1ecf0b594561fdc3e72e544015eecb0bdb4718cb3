import { API as ParentAPI } from '@scaleway/sdk-client';
import type { WaitForOptions } from '@scaleway/sdk-client';
import type { AddRouteRulesRequest, AddRouteRulesResponse, BackendStage, CacheStage, CheckDomainRequest, CheckDomainResponse, CheckLbOriginRequest, CheckLbOriginResponse, CheckPEMChainRequest, CheckPEMChainResponse, CreateBackendStageRequest, CreateCacheStageRequest, CreateDNSStageRequest, CreatePipelineRequest, CreatePurgeRequestRequest, CreateRouteStageRequest, CreateTLSStageRequest, CreateWafStageRequest, DNSStage, DeleteBackendStageRequest, DeleteCacheStageRequest, DeleteCurrentPlanRequest, DeleteDNSStageRequest, DeletePipelineRequest, DeleteRouteStageRequest, DeleteTLSStageRequest, DeleteWafStageRequest, GetBackendStageRequest, GetBillingRequest, GetBillingResponse, GetCacheStageRequest, GetCurrentPlanRequest, GetDNSStageRequest, GetPipelineRequest, GetPurgeRequestRequest, GetRouteStageRequest, GetTLSStageRequest, GetWafStageRequest, HeadStageResponse, ListBackendStagesRequest, ListBackendStagesResponse, ListCacheStagesRequest, ListCacheStagesResponse, ListDNSStagesRequest, ListDNSStagesResponse, ListHeadStagesRequest, ListHeadStagesResponse, ListPipelinesRequest, ListPipelinesResponse, ListPipelinesWithStagesRequest, ListPipelinesWithStagesResponse, ListPlansResponse, ListPurgeRequestsRequest, ListPurgeRequestsResponse, ListRouteRulesRequest, ListRouteRulesResponse, ListRouteStagesRequest, ListRouteStagesResponse, ListTLSStagesRequest, ListTLSStagesResponse, ListWafStagesRequest, ListWafStagesResponse, Pipeline, Plan, PurgeRequest, RouteStage, SearchBackendStagesRequest, SearchWafStagesRequest, SelectPlanRequest, SetHeadStageRequest, SetRouteRulesRequest, SetRouteRulesResponse, TLSStage, UpdateBackendStageRequest, UpdateCacheStageRequest, UpdateDNSStageRequest, UpdatePipelineRequest, UpdateRouteStageRequest, UpdateTLSStageRequest, UpdateWafStageRequest, WafStage } from './types.gen';
/**
 * Edge Services API.
 */
export declare class API extends ParentAPI {
    protected pageOfListPipelines: (request?: Readonly<ListPipelinesRequest>) => Promise<ListPipelinesResponse>;
    /**
     * List pipelines. List all pipelines, for a Scaleway Organization or Scaleway Project. By default, the pipelines returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListPipelinesRequest}
     * @returns A Promise of ListPipelinesResponse
     */
    listPipelines: (request?: Readonly<ListPipelinesRequest>) => Promise<ListPipelinesResponse> & {
        all: () => Promise<Pipeline[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Pipeline[], void, void>;
    };
    /**
     * Create pipeline. Create a new pipeline. You must specify a `dns_stage_id` to form a stage-chain that goes all the way to the backend stage (origin), so the HTTP request will be processed according to the stages you created.
     *
     * @param request - The request {@link CreatePipelineRequest}
     * @returns A Promise of Pipeline
     */
    createPipeline: (request: Readonly<CreatePipelineRequest>) => Promise<Pipeline>;
    /**
     * Get pipeline. Retrieve information about an existing pipeline, specified by its `pipeline_id`. Its full details, including errors, are returned in the response object.
     *
     * @param request - The request {@link GetPipelineRequest}
     * @returns A Promise of Pipeline
     */
    getPipeline: (request: Readonly<GetPipelineRequest>) => Promise<Pipeline>;
    /**
     * Waits for {@link Pipeline} to be in a final state.
     *
     * @param request - The request {@link GetPipelineRequest}
     * @param options - The waiting options
     * @returns A Promise of Pipeline
     */
    waitForPipeline: (request: Readonly<GetPipelineRequest>, options?: Readonly<WaitForOptions<Pipeline>>) => Promise<Pipeline>;
    protected pageOfListPipelinesWithStages: (request?: Readonly<ListPipelinesWithStagesRequest>) => Promise<ListPipelinesWithStagesResponse>;
    listPipelinesWithStages: (request?: Readonly<ListPipelinesWithStagesRequest>) => Promise<ListPipelinesWithStagesResponse> & {
        all: () => Promise<import("./types.gen").PipelineStages[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").PipelineStages[], void, void>;
    };
    /**
     * Update pipeline. Update the parameters of an existing pipeline, specified by its `pipeline_id`. Parameters which can be updated include the `name`, `description` and `dns_stage_id`.
     *
     * @param request - The request {@link UpdatePipelineRequest}
     * @returns A Promise of Pipeline
     */
    updatePipeline: (request: Readonly<UpdatePipelineRequest>) => Promise<Pipeline>;
    /**
     * Delete pipeline. Delete an existing pipeline, specified by its `pipeline_id`. Deleting a pipeline is permanent, and cannot be undone. Note that all stages linked to the pipeline are also deleted.
     *
     * @param request - The request {@link DeletePipelineRequest}
     */
    deletePipeline: (request: Readonly<DeletePipelineRequest>) => Promise<void>;
    protected pageOfListHeadStages: (request: Readonly<ListHeadStagesRequest>) => Promise<ListHeadStagesResponse>;
    listHeadStages: (request: Readonly<ListHeadStagesRequest>) => Promise<ListHeadStagesResponse> & {
        all: () => Promise<import("./types.gen").ListHeadStagesResponseHeadStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").ListHeadStagesResponseHeadStage[], void, void>;
    };
    /**
     * Configure a entry point to your pipeline. You must specify a `head stage` to form a stage-chain that goes all the way to the backend stage (origin), so the HTTP request will be processed according to the stages you created.. You must specify either a `add_new_head_stage` (to add a new head stage), `remove_head_stage` (to remove a head stage) or `swap_head_stage` (to replace a head stage).
     *
     * @param request - The request {@link SetHeadStageRequest}
     * @returns A Promise of HeadStageResponse
     */
    setHeadStage: (request: Readonly<SetHeadStageRequest>) => Promise<HeadStageResponse>;
    protected pageOfListDNSStages: (request: Readonly<ListDNSStagesRequest>) => Promise<ListDNSStagesResponse>;
    /**
     * List DNS stages. List all DNS stages, for a Scaleway Organization or Scaleway Project. By default, the DNS stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListDNSStagesRequest}
     * @returns A Promise of ListDNSStagesResponse
     */
    listDNSStages: (request: Readonly<ListDNSStagesRequest>) => Promise<ListDNSStagesResponse> & {
        all: () => Promise<DNSStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<DNSStage[], void, void>;
    };
    /**
     * Create DNS stage. Create a new DNS stage. You must specify the `fqdns` field to customize the domain endpoint, using a domain you already own.
     *
     * @param request - The request {@link CreateDNSStageRequest}
     * @returns A Promise of DNSStage
     */
    createDNSStage: (request: Readonly<CreateDNSStageRequest>) => Promise<DNSStage>;
    /**
     * Get DNS stage. Retrieve information about an existing DNS stage, specified by its `dns_stage_id`. Its full details, including FQDNs, are returned in the response object.
     *
     * @param request - The request {@link GetDNSStageRequest}
     * @returns A Promise of DNSStage
     */
    getDNSStage: (request: Readonly<GetDNSStageRequest>) => Promise<DNSStage>;
    /**
     * Update DNS stage. Update the parameters of an existing DNS stage, specified by its `dns_stage_id`.
     *
     * @param request - The request {@link UpdateDNSStageRequest}
     * @returns A Promise of DNSStage
     */
    updateDNSStage: (request: Readonly<UpdateDNSStageRequest>) => Promise<DNSStage>;
    /**
     * Delete DNS stage. Delete an existing DNS stage, specified by its `dns_stage_id`. Deleting a DNS stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteDNSStageRequest}
     */
    deleteDNSStage: (request: Readonly<DeleteDNSStageRequest>) => Promise<void>;
    protected pageOfListTLSStages: (request: Readonly<ListTLSStagesRequest>) => Promise<ListTLSStagesResponse>;
    /**
     * List TLS stages. List all TLS stages, for a Scaleway Organization or Scaleway Project. By default, the TLS stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListTLSStagesRequest}
     * @returns A Promise of ListTLSStagesResponse
     */
    listTLSStages: (request: Readonly<ListTLSStagesRequest>) => Promise<ListTLSStagesResponse> & {
        all: () => Promise<TLSStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<TLSStage[], void, void>;
    };
    /**
     * Create TLS stage. Create a new TLS stage. You must specify either the `secrets` or `managed_certificate` fields to customize the SSL/TLS certificate of your endpoint. Choose `secrets` if you are using a pre-existing certificate held in Scaleway Secret Manager, or `managed_certificate` to let Scaleway generate and manage a Let's Encrypt certificate for your customized endpoint.
     *
     * @param request - The request {@link CreateTLSStageRequest}
     * @returns A Promise of TLSStage
     */
    createTLSStage: (request: Readonly<CreateTLSStageRequest>) => Promise<TLSStage>;
    /**
     * Get TLS stage. Retrieve information about an existing TLS stage, specified by its `tls_stage_id`. Its full details, including secrets and certificate expiration date are returned in the response object.
     *
     * @param request - The request {@link GetTLSStageRequest}
     * @returns A Promise of TLSStage
     */
    getTLSStage: (request: Readonly<GetTLSStageRequest>) => Promise<TLSStage>;
    /**
     * Update TLS stage. Update the parameters of an existing TLS stage, specified by its `tls_stage_id`. Both `tls_secrets_config` and `managed_certificate` parameters can be updated.
     *
     * @param request - The request {@link UpdateTLSStageRequest}
     * @returns A Promise of TLSStage
     */
    updateTLSStage: (request: Readonly<UpdateTLSStageRequest>) => Promise<TLSStage>;
    /**
     * Delete TLS stage. Delete an existing TLS stage, specified by its `tls_stage_id`. Deleting a TLS stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteTLSStageRequest}
     */
    deleteTLSStage: (request: Readonly<DeleteTLSStageRequest>) => Promise<void>;
    protected pageOfListCacheStages: (request: Readonly<ListCacheStagesRequest>) => Promise<ListCacheStagesResponse>;
    /**
     * List cache stages. List all cache stages, for a Scaleway Organization or Scaleway Project. By default, the cache stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListCacheStagesRequest}
     * @returns A Promise of ListCacheStagesResponse
     */
    listCacheStages: (request: Readonly<ListCacheStagesRequest>) => Promise<ListCacheStagesResponse> & {
        all: () => Promise<CacheStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<CacheStage[], void, void>;
    };
    /**
     * Create cache stage. Create a new cache stage. You must specify the `fallback_ttl` field to customize the TTL of the cache.
     *
     * @param request - The request {@link CreateCacheStageRequest}
     * @returns A Promise of CacheStage
     */
    createCacheStage: (request: Readonly<CreateCacheStageRequest>) => Promise<CacheStage>;
    /**
     * Get cache stage. Retrieve information about an existing cache stage, specified by its `cache_stage_id`. Its full details, including Time To Live (TTL), are returned in the response object.
     *
     * @param request - The request {@link GetCacheStageRequest}
     * @returns A Promise of CacheStage
     */
    getCacheStage: (request: Readonly<GetCacheStageRequest>) => Promise<CacheStage>;
    /**
     * Update cache stage. Update the parameters of an existing cache stage, specified by its `cache_stage_id`. Parameters which can be updated include the `fallback_ttl`, `include_cookies` and `backend_stage_id`.
     *
     * @param request - The request {@link UpdateCacheStageRequest}
     * @returns A Promise of CacheStage
     */
    updateCacheStage: (request: Readonly<UpdateCacheStageRequest>) => Promise<CacheStage>;
    /**
     * Delete cache stage. Delete an existing cache stage, specified by its `cache_stage_id`. Deleting a cache stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteCacheStageRequest}
     */
    deleteCacheStage: (request: Readonly<DeleteCacheStageRequest>) => Promise<void>;
    protected pageOfListBackendStages: (request: Readonly<ListBackendStagesRequest>) => Promise<ListBackendStagesResponse>;
    /**
     * List backend stages. List all backend stages, for a Scaleway Organization or Scaleway Project. By default, the backend stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListBackendStagesRequest}
     * @returns A Promise of ListBackendStagesResponse
     */
    listBackendStages: (request: Readonly<ListBackendStagesRequest>) => Promise<ListBackendStagesResponse> & {
        all: () => Promise<BackendStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<BackendStage[], void, void>;
    };
    /**
     * Create backend stage. Create a new backend stage. You must specify either a `scaleway_s3` (for a Scaleway Object Storage bucket) or `scaleway_lb` (for a Scaleway Load Balancer) field to configure the origin.
     *
     * @param request - The request {@link CreateBackendStageRequest}
     * @returns A Promise of BackendStage
     */
    createBackendStage: (request: Readonly<CreateBackendStageRequest>) => Promise<BackendStage>;
    /**
     * Get backend stage. Retrieve information about an existing backend stage, specified by its `backend_stage_id`. Its full details, including `scaleway_s3` or `scaleway_lb`, are returned in the response object.
     *
     * @param request - The request {@link GetBackendStageRequest}
     * @returns A Promise of BackendStage
     */
    getBackendStage: (request: Readonly<GetBackendStageRequest>) => Promise<BackendStage>;
    /**
     * Update backend stage. Update the parameters of an existing backend stage, specified by its `backend_stage_id`.
     *
     * @param request - The request {@link UpdateBackendStageRequest}
     * @returns A Promise of BackendStage
     */
    updateBackendStage: (request: Readonly<UpdateBackendStageRequest>) => Promise<BackendStage>;
    /**
     * Delete backend stage. Delete an existing backend stage, specified by its `backend_stage_id`. Deleting a backend stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteBackendStageRequest}
     */
    deleteBackendStage: (request: Readonly<DeleteBackendStageRequest>) => Promise<void>;
    searchBackendStages: (request?: Readonly<SearchBackendStagesRequest>) => Promise<ListBackendStagesResponse>;
    protected pageOfListWafStages: (request: Readonly<ListWafStagesRequest>) => Promise<ListWafStagesResponse>;
    /**
     * List WAF stages. List all WAF stages, for a Scaleway Organization or Scaleway Project. By default, the WAF stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListWafStagesRequest}
     * @returns A Promise of ListWafStagesResponse
     */
    listWafStages: (request: Readonly<ListWafStagesRequest>) => Promise<ListWafStagesResponse> & {
        all: () => Promise<WafStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<WafStage[], void, void>;
    };
    /**
     * Create WAF stage. Create a new WAF stage. You must specify the `mode` and `paranoia_level` fields to customize the WAF.
     *
     * @param request - The request {@link CreateWafStageRequest}
     * @returns A Promise of WafStage
     */
    createWafStage: (request: Readonly<CreateWafStageRequest>) => Promise<WafStage>;
    /**
     * Get WAF stage. Retrieve information about an existing WAF stage, specified by its `waf_stage_id`. Its full details are returned in the response object.
     *
     * @param request - The request {@link GetWafStageRequest}
     * @returns A Promise of WafStage
     */
    getWafStage: (request: Readonly<GetWafStageRequest>) => Promise<WafStage>;
    /**
     * Update WAF stage. Update the parameters of an existing WAF stage, specified by its `waf_stage_id`. Both `mode` and `paranoia_level` parameters can be updated.
     *
     * @param request - The request {@link UpdateWafStageRequest}
     * @returns A Promise of WafStage
     */
    updateWafStage: (request: Readonly<UpdateWafStageRequest>) => Promise<WafStage>;
    /**
     * Delete WAF stage. Delete an existing WAF stage, specified by its `waf_stage_id`. Deleting a WAF stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteWafStageRequest}
     */
    deleteWafStage: (request: Readonly<DeleteWafStageRequest>) => Promise<void>;
    searchWafStages: (request?: Readonly<SearchWafStagesRequest>) => Promise<ListWafStagesResponse>;
    protected pageOfListRouteStages: (request: Readonly<ListRouteStagesRequest>) => Promise<ListRouteStagesResponse>;
    /**
     * List route stages. List all route stages, for a given pipeline. By default, the route stages returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListRouteStagesRequest}
     * @returns A Promise of ListRouteStagesResponse
     */
    listRouteStages: (request: Readonly<ListRouteStagesRequest>) => Promise<ListRouteStagesResponse> & {
        all: () => Promise<RouteStage[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<RouteStage[], void, void>;
    };
    /**
     * Create route stage. Create a new route stage. You must specify the `waf_stage_id` field to customize the route.
     *
     * @param request - The request {@link CreateRouteStageRequest}
     * @returns A Promise of RouteStage
     */
    createRouteStage: (request: Readonly<CreateRouteStageRequest>) => Promise<RouteStage>;
    /**
     * Get route stage. Retrieve information about an existing route stage, specified by its `route_stage_id`. The summary of the route stage (without route rules) is returned in the response object.
     *
     * @param request - The request {@link GetRouteStageRequest}
     * @returns A Promise of RouteStage
     */
    getRouteStage: (request: Readonly<GetRouteStageRequest>) => Promise<RouteStage>;
    /**
     * Update route stage. Update the parameters of an existing route stage, specified by its `route_stage_id`.
     *
     * @param request - The request {@link UpdateRouteStageRequest}
     * @returns A Promise of RouteStage
     */
    updateRouteStage: (request: Readonly<UpdateRouteStageRequest>) => Promise<RouteStage>;
    /**
     * Delete route stage. Delete an existing route stage, specified by its `route_stage_id`. Deleting a route stage is permanent, and cannot be undone.
     *
     * @param request - The request {@link DeleteRouteStageRequest}
     */
    deleteRouteStage: (request: Readonly<DeleteRouteStageRequest>) => Promise<void>;
    /**
     * List route rules. List all route rules of an existing route stage, specified by its `route_stage_id`.
     *
     * @param request - The request {@link ListRouteRulesRequest}
     * @returns A Promise of ListRouteRulesResponse
     */
    listRouteRules: (request: Readonly<ListRouteRulesRequest>) => Promise<ListRouteRulesResponse>;
    /**
     * Set route rules. Set the rules of an existing route stage, specified by its `route_stage_id`.
     *
     * @param request - The request {@link SetRouteRulesRequest}
     * @returns A Promise of SetRouteRulesResponse
     */
    setRouteRules: (request: Readonly<SetRouteRulesRequest>) => Promise<SetRouteRulesResponse>;
    /**
     * Add route rules. Add route rules to an existing route stage, specified by its `route_stage_id`.
     *
     * @param request - The request {@link AddRouteRulesRequest}
     * @returns A Promise of AddRouteRulesResponse
     */
    addRouteRules: (request: Readonly<AddRouteRulesRequest>) => Promise<AddRouteRulesResponse>;
    checkDomain: (request: Readonly<CheckDomainRequest>) => Promise<CheckDomainResponse>;
    checkPEMChain: (request: Readonly<CheckPEMChainRequest>) => Promise<CheckPEMChainResponse>;
    protected pageOfListPurgeRequests: (request?: Readonly<ListPurgeRequestsRequest>) => Promise<ListPurgeRequestsResponse>;
    /**
     * List purge requests. List all purge requests, for a Scaleway Organization or Scaleway Project. This enables you to retrieve a history of all previously-made purge requests. By default, the purge requests returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListPurgeRequestsRequest}
     * @returns A Promise of ListPurgeRequestsResponse
     */
    listPurgeRequests: (request?: Readonly<ListPurgeRequestsRequest>) => Promise<ListPurgeRequestsResponse> & {
        all: () => Promise<PurgeRequest[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<PurgeRequest[], void, void>;
    };
    /**
     * Create purge request. Create a new purge request. You must specify either the `all` field (to purge all content) or a list of `assets` (to define the precise assets to purge).
     *
     * @param request - The request {@link CreatePurgeRequestRequest}
     * @returns A Promise of PurgeRequest
     */
    createPurgeRequest: (request: Readonly<CreatePurgeRequestRequest>) => Promise<PurgeRequest>;
    /**
     * Get purge request. Retrieve information about a purge request, specified by its `purge_request_id`. Its full details, including `status` and `target`, are returned in the response object.
     *
     * @param request - The request {@link GetPurgeRequestRequest}
     * @returns A Promise of PurgeRequest
     */
    getPurgeRequest: (request: Readonly<GetPurgeRequestRequest>) => Promise<PurgeRequest>;
    /**
     * Waits for {@link PurgeRequest} to be in a final state.
     *
     * @param request - The request {@link GetPurgeRequestRequest}
     * @param options - The waiting options
     * @returns A Promise of PurgeRequest
     */
    waitForPurgeRequest: (request: Readonly<GetPurgeRequestRequest>, options?: Readonly<WaitForOptions<PurgeRequest>>) => Promise<PurgeRequest>;
    checkLbOrigin: (request?: Readonly<CheckLbOriginRequest>) => Promise<CheckLbOriginResponse>;
    listPlans: () => Promise<ListPlansResponse>;
    selectPlan: (request?: Readonly<SelectPlanRequest>) => Promise<Plan>;
    getCurrentPlan: (request?: Readonly<GetCurrentPlanRequest>) => Promise<Plan>;
    deleteCurrentPlan: (request?: Readonly<DeleteCurrentPlanRequest>) => Promise<void>;
    /**
     * Gives information on the currently selected Edge Services subscription plan, resource usage and associated billing information for this calendar month (including whether consumption falls within or exceeds the currently selected subscription plan.).
     *
     * @param request - The request {@link GetBillingRequest}
     * @returns A Promise of GetBillingResponse
     */
    getBilling: (request?: Readonly<GetBillingRequest>) => Promise<GetBillingResponse>;
}
