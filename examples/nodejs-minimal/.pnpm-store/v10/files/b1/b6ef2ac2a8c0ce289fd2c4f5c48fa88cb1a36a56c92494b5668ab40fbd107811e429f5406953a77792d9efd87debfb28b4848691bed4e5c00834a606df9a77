"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const unmarshalHuman = (data) => {
  if (!sdkClient.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Human' failed as data isn't a dictionary.`
    );
  }
  return {
    altitudeInMeter: data.altitude_in_meter,
    altitudeInMillimeter: data.altitude_in_millimeter,
    createdAt: sdkClient.unmarshalDate(data.created_at),
    eyesColor: data.eyes_color,
    fingersCount: data.fingers_count,
    hairCount: data.hair_count,
    height: data.height,
    id: data.id,
    isHappy: data.is_happy,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    shoeSize: data.shoe_size,
    status: data.status,
    updatedAt: sdkClient.unmarshalDate(data.updated_at)
  };
};
const unmarshalListHumansResponse = (data) => {
  if (!sdkClient.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListHumansResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    humans: sdkClient.unmarshalArrayOfObject(data.humans, unmarshalHuman),
    totalCount: data.total_count
  };
};
const unmarshalRegisterResponse = (data) => {
  if (!sdkClient.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RegisterResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    secretKey: data.secret_key
  };
};
const marshalCreateHumanRequest = (request, defaults) => ({
  altitude_in_meter: request.altitudeInMeter,
  altitude_in_millimeter: request.altitudeInMillimeter,
  eyes_color: request.eyesColor,
  fingers_count: request.fingersCount,
  hair_count: request.hairCount,
  height: request.height,
  is_happy: request.isHappy,
  name: request.name,
  shoe_size: request.shoeSize,
  ...sdkClient.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalRegisterRequest = (request, defaults) => ({
  username: request.username
});
const marshalUpdateHumanRequest = (request, defaults) => ({
  altitude_in_meter: request.altitudeInMeter,
  altitude_in_millimeter: request.altitudeInMillimeter,
  eyes_color: request.eyesColor,
  fingers_count: request.fingersCount,
  hair_count: request.hairCount,
  height: request.height,
  is_happy: request.isHappy,
  name: request.name,
  shoe_size: request.shoeSize
});
exports.marshalCreateHumanRequest = marshalCreateHumanRequest;
exports.marshalRegisterRequest = marshalRegisterRequest;
exports.marshalUpdateHumanRequest = marshalUpdateHumanRequest;
exports.unmarshalHuman = unmarshalHuman;
exports.unmarshalListHumansResponse = unmarshalListHumansResponse;
exports.unmarshalRegisterResponse = unmarshalRegisterResponse;
