"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const marshalling_gen = require("./marshalling.gen.cjs");
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends sdkClient.API {
  /**
   * Locality of this API.
   * type âˆˆ {'zone','region','global','unspecified'}
   */
  static LOCALITY = sdkClient.toApiLocality({
    zones: [
      "fr-par-1",
      "fr-par-2",
      "fr-par-3",
      "nl-ams-1",
      "nl-ams-2",
      "nl-ams-3",
      "pl-waw-1",
      "pl-waw-2",
      "pl-waw-3"
    ]
  });
  /**
   * Get availability. Get availability for all Instance types.
   *
   * @param request - The request {@link GetServerTypesAvailabilityRequest}
   * @returns A Promise of GetServerTypesAvailabilityResponse
   */
  getServerTypesAvailability = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/servers/availability`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalGetServerTypesAvailabilityResponse
  );
  /**
   * List Instance types. List available Instance types and their technical details.
   *
   * @param request - The request {@link ListServersTypesRequest}
   * @returns A Promise of ListServersTypesResponse
   */
  listServersTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/servers`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListServersTypesResponse
  );
  /**
   * List volume types. List all volume types and their technical details.
   *
   * @param request - The request {@link ListVolumesTypesRequest}
   * @returns A Promise of ListVolumesTypesResponse
   */
  listVolumesTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/volumes`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListVolumesTypesResponse
  );
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: sdkClient.urlParams(
        ["commercial_type", request.commercialType],
        ["name", request.name],
        ["order", request.order],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["private_ip", request.privateIp],
        ["private_network", request.privateNetwork],
        [
          "private_networks",
          request.privateNetworks && request.privateNetworks.length > 0 ? request.privateNetworks.join(",") : void 0
        ],
        ["private_nic_mac_address", request.privateNicMacAddress],
        ["project", request.project],
        [
          "servers",
          request.servers && request.servers.length > 0 ? request.servers.join(",") : void 0
        ],
        ["state", request.state],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["with_ip", request.withIp],
        ["without_ip", request.withoutIp]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List all Instances. List all Instances in a specified Availability Zone, e.g. `fr-par-1`.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => sdkClient.enrichForPagination("servers", this.pageOfListServers, request);
  _createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalCreateServerResponse
  );
  /**
   * Delete an Instance. Delete the Instance with the specified ID.
   *
   * @param request - The request {@link DeleteServerRequest}
   */
  deleteServer = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
  });
  /**
   * Get an Instance. Get the details of a specified Instance.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of GetServerResponse
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalGetServerResponse
  );
  _setServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetServerResponse
  );
  _updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalUpdateServerResponse
  );
  /**
   * List Instance actions. List all actions (e.g. power on, power off, reboot) that can currently be performed on an Instance.
   *
   * @param request - The request {@link ListServerActionsRequest}
   * @returns A Promise of ListServerActionsResponse
   */
  listServerActions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/action`
    },
    marshalling_gen.unmarshalListServerActionsResponse
  );
  /**
     * Perform action. Perform an action on an Instance.
  Available actions are:
  * `poweron`: Start a stopped Instance.
  * `poweroff`: Fully stop the Instance and release the hypervisor slot.
  * `stop_in_place`: Stop the Instance, but keep the slot on the hypervisor.
  * `reboot`: Stop the instance and restart it.
  * `backup`:  Create an image with all the volumes of an Instance.
  * `terminate`: Delete the Instance along with its attached local volumes.
  * `enable_routed_ip`: Migrate the Instance to the new network stack.
  
  The `terminate` action will result in the deletion of `l_ssd` and `scratch` volumes types, `sbs_volume` volumes will only be detached.
  If you want to preserve your `l_ssd` volumes, you should stop your Instance, detach the volumes to be preserved, then delete your Instance.
  
  The `backup` action can be done with:
  * No `volumes` key in the body: an image is created with snapshots of all the server volumes, except for the `scratch` volumes types.
  * `volumes` key in the body with a dictionary as value, in this dictionary volumes UUID as keys and empty dictionaries as values : an image is created with the snapshots of the volumes in `volumes` key. `scratch` volumes types can't be shapshotted.
     *
     * @param request - The request {@link ServerActionRequest}
     * @returns A Promise of ServerActionResponse
     */
  serverAction = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalServerActionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/action`
    },
    marshalling_gen.unmarshalServerActionResponse
  );
  /**
   * List user data. List all user data keys registered on a specified Instance.
   *
   * @param request - The request {@link ListServerUserDataRequest}
   * @returns A Promise of ListServerUserDataResponse
   */
  listServerUserData = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/user_data`
    },
    marshalling_gen.unmarshalListServerUserDataResponse
  );
  /**
   * Delete user data. Delete the specified key from an Instance's user data.
   *
   * @param request - The request {@link DeleteServerUserDataRequest}
   */
  deleteServerUserData = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/user_data/${sdkClient.validatePathParam("key", request.key)}`
  });
  /**
     * Get Instance compatible types. Get compatible commercial types that can be used to update the Instance. The compatibility of an Instance offer is based on:
  * the CPU architecture
  * the OS type
  * the required l_ssd storage size
  * the required scratch storage size
  If the specified Instance offer is flagged as end of service, the best compatible offer is the first returned.
     *
     * @param request - The request {@link GetServerCompatibleTypesRequest}
     * @returns A Promise of ServerCompatibleTypes
     */
  getServerCompatibleTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/compatible-types`
    },
    marshalling_gen.unmarshalServerCompatibleTypes
  );
  attachServerVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachServerVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/attach-volume`
    },
    marshalling_gen.unmarshalAttachServerVolumeResponse
  );
  detachServerVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDetachServerVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/detach-volume`
    },
    marshalling_gen.unmarshalDetachServerVolumeResponse
  );
  /**
   * Attach a filesystem volume to an Instance.
   *
   * @param request - The request {@link AttachServerFileSystemRequest}
   * @returns A Promise of AttachServerFileSystemResponse
   */
  attachServerFileSystem = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachServerFileSystemRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/attach-filesystem`
    },
    marshalling_gen.unmarshalAttachServerFileSystemResponse
  );
  /**
   * Detach a filesystem volume to an Instance.
   *
   * @param request - The request {@link DetachServerFileSystemRequest}
   * @returns A Promise of DetachServerFileSystemResponse
   */
  detachServerFileSystem = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDetachServerFileSystemRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/detach-filesystem`
    },
    marshalling_gen.unmarshalDetachServerFileSystemResponse
  );
  pageOfListImages = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images`,
      urlParams: sdkClient.urlParams(
        ["arch", request.arch],
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["public", request.public],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListImagesResponse
  );
  /**
   * List Instance images. List all existing Instance images.
   *
   * @param request - The request {@link ListImagesRequest}
   * @returns A Promise of ListImagesResponse
   */
  listImages = (request = {}) => sdkClient.enrichForPagination("images", this.pageOfListImages, request);
  /**
   * Get an Instance image. Get details of an image with the specified ID.
   *
   * @param request - The request {@link GetImageRequest}
   * @returns A Promise of GetImageResponse
   */
  getImage = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${sdkClient.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalGetImageResponse
  );
  /**
   * Create an Instance image. Create an Instance image from the specified snapshot ID.
   *
   * @param request - The request {@link CreateImageRequest}
   * @returns A Promise of CreateImageResponse
   */
  createImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images`
    },
    marshalling_gen.unmarshalCreateImageResponse
  );
  _setImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${sdkClient.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetImageResponse
  );
  /**
   * Update image. Update the properties of an image.
   *
   * @param request - The request {@link UpdateImageRequest}
   * @returns A Promise of UpdateImageResponse
   */
  updateImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${sdkClient.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalUpdateImageResponse
  );
  /**
   * Delete an Instance image. Delete the image with the specified ID.
   *
   * @param request - The request {@link DeleteImageRequest}
   */
  deleteImage = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${sdkClient.validatePathParam("imageId", request.imageId)}`
  });
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`,
      urlParams: sdkClient.urlParams(
        ["base_volume_id", request.baseVolumeId],
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List snapshots. List all snapshots of an Organization in a specified Availability Zone.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => sdkClient.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Create a snapshot from a specified volume or from a QCOW2 file. Create a snapshot from a specified volume or from a QCOW2 file in a specified Availability Zone.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of CreateSnapshotResponse
   */
  createSnapshot = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`
    },
    marshalling_gen.unmarshalCreateSnapshotResponse
  );
  /**
   * Get a snapshot. Get details of a snapshot with the specified ID.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of GetSnapshotResponse
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalGetSnapshotResponse
  );
  _setSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSetSnapshotResponse
  );
  /**
   * Update a snapshot. Update the properties of a snapshot.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of UpdateSnapshotResponse
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalUpdateSnapshotResponse
  );
  /**
   * Delete a snapshot. Delete the snapshot with the specified ID.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   */
  deleteSnapshot = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
  });
  /**
   * Export a snapshot. Export a snapshot to a specified Object Storage bucket in the same region.
   *
   * @param request - The request {@link ExportSnapshotRequest}
   * @returns A Promise of ExportSnapshotResponse
   */
  exportSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalExportSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}/export`
    },
    marshalling_gen.unmarshalExportSnapshotResponse
  );
  pageOfListVolumes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["volume_type", request.volumeType]
      )
    },
    marshalling_gen.unmarshalListVolumesResponse
  );
  /**
   * List volumes. List volumes in the specified Availability Zone. You can filter the output by volume type.
   *
   * @param request - The request {@link ListVolumesRequest}
   * @returns A Promise of ListVolumesResponse
   */
  listVolumes = (request = {}) => sdkClient.enrichForPagination("volumes", this.pageOfListVolumes, request);
  /**
   * Create a volume. Create a volume of a specified type in an Availability Zone.
   *
   * @param request - The request {@link CreateVolumeRequest}
   * @returns A Promise of CreateVolumeResponse
   */
  createVolume = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`
    },
    marshalling_gen.unmarshalCreateVolumeResponse
  );
  /**
   * Get a volume. Get details of a volume with the specified ID.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @returns A Promise of GetVolumeResponse
   */
  getVolume = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${sdkClient.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalGetVolumeResponse
  );
  /**
   * Update a volume. Replace the name and/or size properties of a volume specified by its ID, with the specified value(s).
   *
   * @param request - The request {@link UpdateVolumeRequest}
   * @returns A Promise of UpdateVolumeResponse
   */
  updateVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${sdkClient.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalUpdateVolumeResponse
  );
  /**
   * Delete a volume. Delete the volume with the specified ID.
   *
   * @param request - The request {@link DeleteVolumeRequest}
   */
  deleteVolume = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${sdkClient.validatePathParam("volumeId", request.volumeId)}`
  });
  pageOfListSecurityGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["project_default", request.projectDefault],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListSecurityGroupsResponse
  );
  /**
   * List security groups. List all existing security groups.
   *
   * @param request - The request {@link ListSecurityGroupsRequest}
   * @returns A Promise of ListSecurityGroupsResponse
   */
  listSecurityGroups = (request = {}) => sdkClient.enrichForPagination(
    "securityGroups",
    this.pageOfListSecurityGroups,
    request
  );
  /**
   * Create a security group. Create a security group with a specified name and description.
   *
   * @param request - The request {@link CreateSecurityGroupRequest}
   * @returns A Promise of CreateSecurityGroupResponse
   */
  createSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups`
    },
    marshalling_gen.unmarshalCreateSecurityGroupResponse
  );
  /**
   * Get a security group. Get the details of a security group with the specified ID.
   *
   * @param request - The request {@link GetSecurityGroupRequest}
   * @returns A Promise of GetSecurityGroupResponse
   */
  getSecurityGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}`
    },
    marshalling_gen.unmarshalGetSecurityGroupResponse
  );
  /**
   * Delete a security group. Delete a security group with the specified ID.
   *
   * @param request - The request {@link DeleteSecurityGroupRequest}
   */
  deleteSecurityGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}`
  });
  _setSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetSecurityGroupResponse
  );
  /**
   * Update a security group. Update the properties of security group.
   *
   * @param request - The request {@link UpdateSecurityGroupRequest}
   * @returns A Promise of UpdateSecurityGroupResponse
   */
  updateSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}`
    },
    marshalling_gen.unmarshalUpdateSecurityGroupResponse
  );
  /**
   * Get default rules. Lists the default rules applied to all the security groups.
   *
   * @param request - The request {@link ListDefaultSecurityGroupRulesRequest}
   * @returns A Promise of ListSecurityGroupRulesResponse
   */
  listDefaultSecurityGroupRules = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/default/rules`
    },
    marshalling_gen.unmarshalListSecurityGroupRulesResponse
  );
  pageOfListSecurityGroupRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListSecurityGroupRulesResponse
  );
  /**
   * List rules. List the rules of the a specified security group ID.
   *
   * @param request - The request {@link ListSecurityGroupRulesRequest}
   * @returns A Promise of ListSecurityGroupRulesResponse
   */
  listSecurityGroupRules = (request) => sdkClient.enrichForPagination("rules", this.pageOfListSecurityGroupRules, request);
  /**
   * Create rule. Create a rule in the specified security group ID.
   *
   * @param request - The request {@link CreateSecurityGroupRuleRequest}
   * @returns A Promise of CreateSecurityGroupRuleResponse
   */
  createSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules`
    },
    marshalling_gen.unmarshalCreateSecurityGroupRuleResponse
  );
  /**
   * Update all the rules of a security group. Replaces the existing rules of the security group with the rules provided. This endpoint supports the update of existing rules, creation of new rules and deletion of existing rules when they are not passed in the request.
   *
   * @param request - The request {@link SetSecurityGroupRulesRequest}
   * @returns A Promise of SetSecurityGroupRulesResponse
   */
  setSecurityGroupRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules`
    },
    marshalling_gen.unmarshalSetSecurityGroupRulesResponse
  );
  /**
   * Delete rule. Delete a security group rule with the specified ID.
   *
   * @param request - The request {@link DeleteSecurityGroupRuleRequest}
   */
  deleteSecurityGroupRule = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${sdkClient.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
  });
  /**
   * Get rule. Get details of a security group rule with the specified ID.
   *
   * @param request - The request {@link GetSecurityGroupRuleRequest}
   * @returns A Promise of GetSecurityGroupRuleResponse
   */
  getSecurityGroupRule = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${sdkClient.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalGetSecurityGroupRuleResponse
  );
  _setSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${sdkClient.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalSetSecurityGroupRuleResponse
  );
  /**
   * Update security group rule. Update the properties of a rule from a specified security group.
   *
   * @param request - The request {@link UpdateSecurityGroupRuleRequest}
   * @returns A Promise of UpdateSecurityGroupRuleResponse
   */
  updateSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${sdkClient.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${sdkClient.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalUpdateSecurityGroupRuleResponse
  );
  pageOfListPlacementGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListPlacementGroupsResponse
  );
  /**
   * List placement groups. List all placement groups in a specified Availability Zone.
   *
   * @param request - The request {@link ListPlacementGroupsRequest}
   * @returns A Promise of ListPlacementGroupsResponse
   */
  listPlacementGroups = (request = {}) => sdkClient.enrichForPagination(
    "placementGroups",
    this.pageOfListPlacementGroups,
    request
  );
  /**
   * Create a placement group. Create a new placement group in a specified Availability Zone.
   *
   * @param request - The request {@link CreatePlacementGroupRequest}
   * @returns A Promise of CreatePlacementGroupResponse
   */
  createPlacementGroup = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups`
    },
    marshalling_gen.unmarshalCreatePlacementGroupResponse
  );
  /**
   * Get a placement group. Get the specified placement group.
   *
   * @param request - The request {@link GetPlacementGroupRequest}
   * @returns A Promise of GetPlacementGroupResponse
   */
  getPlacementGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalGetPlacementGroupResponse
  );
  /**
   * Set placement group. Set all parameters of the specified placement group.
   *
   * @param request - The request {@link SetPlacementGroupRequest}
   * @returns A Promise of SetPlacementGroupResponse
   */
  setPlacementGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalSetPlacementGroupResponse
  );
  /**
   * Update a placement group. Update one or more parameter of the specified placement group.
   *
   * @param request - The request {@link UpdatePlacementGroupRequest}
   * @returns A Promise of UpdatePlacementGroupResponse
   */
  updatePlacementGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalUpdatePlacementGroupResponse
  );
  /**
   * Delete the specified placement group.
   *
   * @param request - The request {@link DeletePlacementGroupRequest}
   */
  deletePlacementGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}`
  });
  /**
   * Get placement group servers. Get all Instances belonging to the specified placement group.
   *
   * @param request - The request {@link GetPlacementGroupServersRequest}
   * @returns A Promise of GetPlacementGroupServersResponse
   */
  getPlacementGroupServers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalGetPlacementGroupServersResponse
  );
  /**
   * Set placement group servers. Set all Instances belonging to the specified placement group.
   *
   * @param request - The request {@link SetPlacementGroupServersRequest}
   * @returns A Promise of SetPlacementGroupServersResponse
   */
  setPlacementGroupServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPlacementGroupServersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalSetPlacementGroupServersResponse
  );
  /**
   * Update placement group servers. Update all Instances belonging to the specified placement group.
   *
   * @param request - The request {@link UpdatePlacementGroupServersRequest}
   * @returns A Promise of UpdatePlacementGroupServersResponse
   */
  updatePlacementGroupServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePlacementGroupServersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${sdkClient.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalUpdatePlacementGroupServersResponse
  );
  pageOfListIps = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  /**
   * List all flexible IPs. List all flexible IPs in a specified zone.
   *
   * @param request - The request {@link ListIpsRequest}
   * @returns A Promise of ListIpsResponse
   */
  listIps = (request = {}) => sdkClient.enrichForPagination("ips", this.pageOfListIps, request);
  /**
   * Reserve a flexible IP. Reserve a flexible IP and attach it to the specified Instance.
   *
   * @param request - The request {@link CreateIpRequest}
   * @returns A Promise of CreateIpResponse
   */
  createIp = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`
    },
    marshalling_gen.unmarshalCreateIpResponse
  );
  /**
   * Get a flexible IP. Get details of an IP with the specified ID or address.
   *
   * @param request - The request {@link GetIpRequest}
   * @returns A Promise of GetIpResponse
   */
  getIp = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${sdkClient.validatePathParam("ip", request.ip)}`
    },
    marshalling_gen.unmarshalGetIpResponse
  );
  /**
   * Update a flexible IP. Update a flexible IP in the specified zone with the specified ID.
   *
   * @param request - The request {@link UpdateIpRequest}
   * @returns A Promise of UpdateIpResponse
   */
  updateIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${sdkClient.validatePathParam("ip", request.ip)}`
    },
    marshalling_gen.unmarshalUpdateIpResponse
  );
  /**
   * Delete a flexible IP. Delete the IP with the specified ID.
   *
   * @param request - The request {@link DeleteIpRequest}
   */
  deleteIp = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${sdkClient.validatePathParam("ip", request.ip)}`
  });
  pageOfListPrivateNICs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private_nics`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListPrivateNICsResponse
  );
  /**
   * List all private NICs. List all private NICs of a specified Instance.
   *
   * @param request - The request {@link ListPrivateNICsRequest}
   * @returns A Promise of ListPrivateNICsResponse
   */
  listPrivateNICs = (request) => sdkClient.enrichForPagination("privateNics", this.pageOfListPrivateNICs, request);
  /**
   * Create a private NIC connecting an Instance to a Private Network.
   *
   * @param request - The request {@link CreatePrivateNICRequest}
   * @returns A Promise of CreatePrivateNICResponse
   */
  createPrivateNIC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePrivateNICRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private_nics`
    },
    marshalling_gen.unmarshalCreatePrivateNICResponse
  );
  /**
   * Get a private NIC. Get private NIC properties.
   *
   * @param request - The request {@link GetPrivateNICRequest}
   * @returns A Promise of GetPrivateNICResponse
   */
  getPrivateNIC = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private_nics/${sdkClient.validatePathParam("privateNicId", request.privateNicId)}`
    },
    marshalling_gen.unmarshalGetPrivateNICResponse
  );
  /**
   * Update a private NIC. Update one or more parameter(s) of a specified private NIC.
   *
   * @param request - The request {@link UpdatePrivateNICRequest}
   * @returns A Promise of PrivateNIC
   */
  updatePrivateNIC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePrivateNICRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private_nics/${sdkClient.validatePathParam("privateNicId", request.privateNicId)}`
    },
    marshalling_gen.unmarshalPrivateNIC
  );
  /**
   * Delete a private NIC.
   *
   * @param request - The request {@link DeletePrivateNICRequest}
   */
  deletePrivateNIC = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private_nics/${sdkClient.validatePathParam("privateNicId", request.privateNicId)}`
  });
  getDashboard = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dashboard`,
      urlParams: sdkClient.urlParams(
        ["organization", request.organization],
        ["project", request.project]
      )
    },
    marshalling_gen.unmarshalGetDashboardResponse
  );
  /**
     * Get a volume or snapshot's migration plan. Given a volume or snapshot, returns the migration plan but does not perform the actual migration. To perform the migration, you have to call the [Migrate a volume and/or snapshots to SBS](#path-volumes-migrate-a-volume-andor-snapshots-to-sbs-scaleway-block-storage) endpoint afterward.
  The endpoint returns the resources that should be migrated together:
  - the volume and any snapshots created from the volume, if the call was made to plan a volume migration.
  - the base volume of the snapshot (if the volume is not deleted) and its related snapshots, if the call was made to plan a snapshot migration.
  The endpoint also returns the validation_key, which must be provided to the [Migrate a volume and/or snapshots to SBS](#path-volumes-migrate-a-volume-andor-snapshots-to-sbs-scaleway-block-storage) endpoint to confirm that all resources listed in the plan should be migrated.
     *
     * @param request - The request {@link PlanBlockMigrationRequest}
     * @returns A Promise of MigrationPlan
     */
  planBlockMigration = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPlanBlockMigrationRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/block-migration/plan`
    },
    marshalling_gen.unmarshalMigrationPlan
  );
  /**
   * Migrate a volume and/or snapshots to SBS (Scaleway Block Storage). To be used, the call to this endpoint must be preceded by a call to the [Get a volume or snapshot's migration plan](#path-volumes-get-a-volume-or-snapshots-migration-plan) endpoint. To migrate all resources mentioned in the migration plan, the validation_key returned in the plan must be provided.
   *
   * @param request - The request {@link ApplyBlockMigrationRequest}
   */
  applyBlockMigration = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalApplyBlockMigrationRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/block-migration/apply`
  });
  checkBlockMigrationOrganizationQuotas = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalCheckBlockMigrationOrganizationQuotasRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/instance/v1/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/block-migration/check-organization-quotas`
  });
}
exports.API = API;
