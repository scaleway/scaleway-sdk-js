import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'

const SOURCE_DIR = 'src'
const DEFAULT_GENERATED_EXPORT_PATH = 'index.gen.ts'

const AUTO_GENERATE_MESSAGE = `/**
  * This file is automatically generated
  * PLEASE DO NOT EDIT HERE
  */\n
  `

const { ENTRY_POINT } = process.env

if (!ENTRY_POINT) {
  throw new Error('ENTRY_POINT is not defined')
}

const INPUT_PATH_DIR = path.resolve(process.cwd(), ENTRY_POINT)

const CUSTOM = {
  /** Std is use for type generation */
  PRODUCT_EXPORT: new Set(['std']),
  /** Theses product are manually update to add waitFor... */
  // DEACTIVATED FOR NOW
  PRODUCT_VERSION_EXPORT: new Set([
    '',
    // 'baremetal/v1',
    // This product is fully rewritten
    'instance/v1',
    // K8s export a protected function
    'k8s/v1',
    // Manual
    'payment/v1',
    'billing/v1',
  ]),
}

// const snakeToSlug = (str: string) => str.split('_').join('-')
const upperFirst = (str: string) =>
  str.slice(0, 1).toUpperCase() + str.slice(1, str.length)
const snakeToPascal = (str: string) =>
  str
    .split('_')
    .map(s => upperFirst(s.split('/').map(upperFirst).join('/')))
    .join('')

const exportProductVersions = (productDir: string) => {
  const fullPath = path.join(INPUT_PATH_DIR, productDir, SOURCE_DIR)
  const versionDirs = fs.readdirSync(fullPath)

  const pathFile = `${fullPath}/${DEFAULT_GENERATED_EXPORT_PATH}` as const

  fs.writeFileSync(pathFile, AUTO_GENERATE_MESSAGE)

  for (const versionDir of versionDirs) {
    const pathVersion = `${fullPath}/${versionDir}`

    if (fs.statSync(pathVersion).isDirectory()) {
      const exportPath = CUSTOM.PRODUCT_VERSION_EXPORT.has(
        `${productDir}/${versionDir}`,
      )
        ? `./${versionDir}/index`
        : `./${versionDir}/index.gen`

      fs.appendFileSync(
        pathFile,
        `\nexport * as ${snakeToPascal(productDir)}${versionDir} from '${exportPath}'`,
      )
    }
  }
}

/**
 * This function will an index.ts with an export of all product. Std is a custom
 * export as it's only serve for types.
 */
const exportProducts = () => {
  const productsDirs = fs.readdirSync(INPUT_PATH_DIR)
  const productExports = []

  for (const productDir of productsDirs) {
    const fullPath = path.join(INPUT_PATH_DIR, productDir)

    if (fs.statSync(fullPath).isDirectory()) {
      if (!CUSTOM.PRODUCT_EXPORT.has(productDir)) {
        exportProductVersions(productDir)
      }

      productExports.push(snakeToPascal(productDir))
    }
  }
}

exportProducts()
