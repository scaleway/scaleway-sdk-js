{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,SAAS,CAAA;AAC7B,6EAA6E;AAC7E,2EAA2E;AAC3E,YAAY;AAEZ,qBAAqB;AACrB,MAAM,QAAQ,GACZ,sBAAsB,IAAI,EAAE;IAC1B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAG,EAA+B,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AAUrE,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,KAAgB,EAChB,EAAE,KAAK,GAAG,QAAQ,EAAE,UAAU,KAAc,EAAE,EAC9C,EAAE,CACF,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACvB,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,IAAI,OAAO,GAAG,CAAC,CAAA;IACf,MAAM,OAAO,GAAqC,EAAE,CAAA;IAEpD,sGAAsG;IACtG,IAAI,QAAQ,GAAG,KAAK,CAAA;IACpB,IAAI,SAAkB,CAAA;IACtB,MAAM,MAAM,GAAG,CAAC,EAAY,EAAE,EAAE;QAC9B,IAAI,QAAQ;YAAE,OAAM;QACpB,QAAQ,GAAG,IAAI,CAAA;QACf,SAAS,KAAK,EAAE,CAAA;QAChB,IAAI,CAAC,UAAU;YAAE,GAAG,CAAC,SAAS,CAAC,CAAA;IACjC,CAAC,CAAA;IAED,IAAI,QAAQ,GAAG,KAAK,CAAA;IACpB,MAAM,OAAO,GAAG,GAAG,EAAE;QACnB,IAAI,QAAQ,IAAI,MAAM,GAAG,CAAC;YAAE,OAAM;QAClC,QAAQ,GAAG,IAAI,CAAA;QACf,GAAG,CAAC,OAAO,CAAC,CAAA;IACd,CAAC,CAAA;IAED,MAAM,GAAG,GAAG,GAAG,EAAE;QACf,MAAM,CAAC,GAAG,OAAO,EAAE,CAAA;QACnB,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM;YAAE,OAAO,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;QAE7D,MAAM,EAAE,CAAA;QACR,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QACrB,qBAAqB;QACrB,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;QAC9C,oBAAoB;QAEpB,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;aAChB,IAAI,CACH,MAAM,CAAC,EAAE;YACP,MAAM,EAAE,CAAA;YACR,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAA;YACnB,OAAO,MAAM,CAAA;QACf,CAAC,EACD,EAAE,CAAC,EAAE;YACH,MAAM,EAAE,CAAA;YACR,MAAM,CAAC,EAAE,CAAC,CAAA;QACZ,CAAC,CACF;aACA,IAAI,CAAC,MAAM,CAAC,EAAE;YACb,IAAI,QAAQ,IAAI,MAAM,KAAK,CAAC;gBAAE,OAAO,GAAG,CAAC,SAAS,CAAC,CAAA;YACnD,GAAG,EAAE,CAAA;YACL,OAAO,MAAM,CAAA;QACf,CAAC,CAAC,CAAA;IACN,CAAC,CAAA;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE;QAAE,GAAG,EAAE,CAAA;AACvC,CAAC,CAAC,CAAA","sourcesContent":["import * as os from 'node:os'\n// availableParallelism available only since node v19, for older versions use\n// cpus() cpus() can return an empty list if /proc is not mounted, use 1 in\n// this case\n\n/* c8 ignore start */\nconst defLimit =\n  'availableParallelism' in os\n    ? Math.max(1, os.availableParallelism() - 1)\n    : Math.max(1, (os as typeof import('node:os')).cpus().length - 1)\n/* c8 ignore stop */\n\nexport type Step<T> = () => Promise<T>\n\nexport type Options = {\n  limit?: number\n  rejectLate?: boolean\n}\n\nexport const callLimit = <T extends any>(\n  queue: Step<T>[],\n  { limit = defLimit, rejectLate }: Options = {},\n) =>\n  new Promise((res, rej) => {\n    let active = 0\n    let current = 0\n    const results: (T | void | Promise<void | T>)[] = []\n\n    // Whether or not we rejected, distinct from the rejection just in case the rejection itself is falsey\n    let rejected = false\n    let rejection: unknown\n    const reject = (er?: unknown) => {\n      if (rejected) return\n      rejected = true\n      rejection ??= er\n      if (!rejectLate) rej(rejection)\n    }\n\n    let resolved = false\n    const resolve = () => {\n      if (resolved || active > 0) return\n      resolved = true\n      res(results)\n    }\n\n    const run = () => {\n      const c = current++\n      if (c >= queue.length) return rejected ? reject() : resolve()\n\n      active++\n      const step = queue[c]\n      /* c8 ignore start */\n      if (!step) throw new Error('walked off queue')\n      /* c8 ignore stop */\n\n      results[c] = step()\n        .then(\n          result => {\n            active--\n            results[c] = result\n            return result\n          },\n          er => {\n            active--\n            reject(er)\n          },\n        )\n        .then(result => {\n          if (rejected && active === 0) return rej(rejection)\n          run()\n          return result\n        })\n    }\n\n    for (let i = 0; i < limit; i++) run()\n  })\n"]}