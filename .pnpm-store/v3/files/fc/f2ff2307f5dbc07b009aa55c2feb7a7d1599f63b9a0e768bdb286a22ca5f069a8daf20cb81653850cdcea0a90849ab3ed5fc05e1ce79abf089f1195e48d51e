{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type * as eslint from 'eslint';\r\nimport type * as ESTree from 'estree';\r\nimport { TSDocParser, TextRange, TSDocConfiguration, type ParserContext } from '@microsoft/tsdoc';\r\nimport type { TSDocConfigFile } from '@microsoft/tsdoc-config';\r\n\r\nimport { Debug } from './Debug';\r\nimport { ConfigCache } from './ConfigCache';\r\n\r\nconst tsdocMessageIds: { [x: string]: string } = {};\r\n\r\nconst defaultTSDocConfiguration: TSDocConfiguration = new TSDocConfiguration();\r\ndefaultTSDocConfiguration.allTsdocMessageIds.forEach((messageId: string) => {\r\n  tsdocMessageIds[messageId] = `${messageId}: {{unformattedText}}`;\r\n});\r\n\r\ninterface IPlugin {\r\n  rules: { [x: string]: eslint.Rule.RuleModule };\r\n}\r\n\r\nconst plugin: IPlugin = {\r\n  rules: {\r\n    // NOTE: The actual ESLint rule name will be \"tsdoc/syntax\".  It is calculated by deleting \"eslint-plugin-\"\r\n    // from the NPM package name, and then appending this string.\r\n    syntax: {\r\n      meta: {\r\n        messages: {\r\n          'error-loading-config-file': 'Error loading TSDoc config file:\\n{{details}}',\r\n          'error-applying-config': 'Error applying TSDoc configuration: {{details}}',\r\n          ...tsdocMessageIds\r\n        },\r\n        type: 'problem',\r\n        docs: {\r\n          description: 'Validates that TypeScript documentation comments conform to the TSDoc standard',\r\n          category: 'Stylistic Issues',\r\n          // This package is experimental\r\n          recommended: false,\r\n          url: 'https://tsdoc.org/pages/packages/eslint-plugin-tsdoc'\r\n        }\r\n      },\r\n      create: (context: eslint.Rule.RuleContext) => {\r\n        const sourceFilePath: string = context.getFilename();\r\n        Debug.log(`Linting: \"${sourceFilePath}\"`);\r\n\r\n        const tsdocConfiguration: TSDocConfiguration = new TSDocConfiguration();\r\n\r\n        try {\r\n          const tsdocConfigFile: TSDocConfigFile = ConfigCache.getForSourceFile(sourceFilePath);\r\n          if (!tsdocConfigFile.fileNotFound) {\r\n            if (tsdocConfigFile.hasErrors) {\r\n              context.report({\r\n                loc: { line: 1, column: 1 },\r\n                messageId: 'error-loading-config-file',\r\n                data: {\r\n                  details: tsdocConfigFile.getErrorSummary()\r\n                }\r\n              });\r\n            }\r\n\r\n            try {\r\n              tsdocConfigFile.configureParser(tsdocConfiguration);\r\n            } catch (e) {\r\n              context.report({\r\n                loc: { line: 1, column: 1 },\r\n                messageId: 'error-applying-config',\r\n                data: {\r\n                  details: e.message\r\n                }\r\n              });\r\n            }\r\n          }\r\n        } catch (e) {\r\n          context.report({\r\n            loc: { line: 1, column: 1 },\r\n            messageId: 'error-loading-config-file',\r\n            data: {\r\n              details: `Unexpected exception: ${e.message}`\r\n            }\r\n          });\r\n        }\r\n\r\n        const tsdocParser: TSDocParser = new TSDocParser(tsdocConfiguration);\r\n\r\n        const sourceCode: eslint.SourceCode = context.getSourceCode();\r\n        const checkCommentBlocks: (node: ESTree.Node) => void = function (node: ESTree.Node) {\r\n          for (const comment of sourceCode.getAllComments()) {\r\n            if (comment.type !== 'Block') {\r\n              continue;\r\n            }\r\n            if (!comment.range) {\r\n              continue;\r\n            }\r\n\r\n            const textRange: TextRange = TextRange.fromStringRange(\r\n              sourceCode.text,\r\n              comment.range[0],\r\n              comment.range[1]\r\n            );\r\n\r\n            // Smallest comment is \"/***/\"\r\n            if (textRange.length < 5) {\r\n              continue;\r\n            }\r\n            // Make sure it starts with \"/**\"\r\n            if (textRange.buffer[textRange.pos + 2] !== '*') {\r\n              continue;\r\n            }\r\n\r\n            const parserContext: ParserContext = tsdocParser.parseRange(textRange);\r\n            for (const message of parserContext.log.messages) {\r\n              context.report({\r\n                loc: {\r\n                  start: sourceCode.getLocFromIndex(message.textRange.pos),\r\n                  end: sourceCode.getLocFromIndex(message.textRange.end)\r\n                },\r\n                messageId: message.messageId,\r\n                data: {\r\n                  unformattedText: message.unformattedText\r\n                }\r\n              });\r\n            }\r\n          }\r\n        };\r\n\r\n        return {\r\n          Program: checkCommentBlocks\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport = plugin;\r\n"]}