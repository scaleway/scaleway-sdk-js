import { env } from "process";
import { EnvironmentKey } from "./env.js";
import { resolveConfigurationFilePath } from "./path-resolver.js";
import { loadConfigurationFromFile } from "./yml-loader.js";
const convertFileConfigToSDK = (obj) => ({
  accessKey: obj.access_key,
  apiURL: obj.api_url,
  defaultOrganizationId: obj.default_organization_id,
  defaultProjectId: obj.default_project_id,
  defaultRegion: obj.default_region,
  defaultZone: obj.default_zone,
  secretKey: obj.secret_key
});
const loadProfileFromEnvironmentValues = () => ({
  accessKey: env[EnvironmentKey.ScwAccessKey],
  apiURL: env[EnvironmentKey.ScwAPIURL],
  defaultOrganizationId: env[EnvironmentKey.ScwDefaultOrganizationId],
  defaultProjectId: env[EnvironmentKey.ScwDefaultProjectId],
  defaultRegion: env[EnvironmentKey.ScwDefaultRegion],
  defaultZone: env[EnvironmentKey.ScwDefaultZone],
  secretKey: env[EnvironmentKey.ScwSecretKey]
});
const loadAllProfilesFromConfigurationFile = (params) => {
  const filePath = params?.filepath ?? resolveConfigurationFilePath();
  if (typeof filePath !== "string" || filePath.length === 0) {
    throw new Error("Could not find the path to the configuration file.");
  }
  const configs = loadConfigurationFromFile(filePath);
  return Object.keys(configs).reduce(
    (prev, pKey) => ({
      ...prev,
      [pKey]: convertFileConfigToSDK(configs[pKey])
    }),
    {}
  );
};
const loadProfileFromConfigurationFile = (params) => {
  const configs = loadAllProfilesFromConfigurationFile(params);
  const profileName = params?.profileName ?? "default";
  const profileMap = configs[profileName];
  if (typeof profileMap !== "object") {
    throw new Error(
      `Could not find the desired profile '${profileName}' in the configuration file.`
    );
  }
  return profileMap;
};
export {
  loadAllProfilesFromConfigurationFile,
  loadProfileFromConfigurationFile,
  loadProfileFromEnvironmentValues
};
