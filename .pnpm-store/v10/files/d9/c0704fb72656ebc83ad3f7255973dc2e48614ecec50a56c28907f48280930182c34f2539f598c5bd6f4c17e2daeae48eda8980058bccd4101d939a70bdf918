import { API as ParentAPI } from '@scaleway/sdk-client';
import type { ApiLocality, WaitForOptions } from '@scaleway/sdk-client';
import type { CreateEndpointRequest, CreateInstanceRequest, CreateSnapshotRequest, CreateUserRequest, DeleteEndpointRequest, DeleteInstanceRequest, DeleteSnapshotRequest, DeleteUserRequest, Endpoint, GetInstanceCertificateRequest, GetInstanceRequest, GetSnapshotRequest, Instance, ListInstancesRequest, ListInstancesResponse, ListNodeTypesRequest, ListNodeTypesResponse, ListSnapshotsRequest, ListSnapshotsResponse, ListUsersRequest, ListUsersResponse, ListVersionsRequest, ListVersionsResponse, RestoreSnapshotRequest, SetUserRoleRequest, Snapshot, UpdateInstanceRequest, UpdateSnapshotRequest, UpdateUserRequest, UpgradeInstanceRequest, User } from './types.gen';
/**
 * Managed MongoDB®.

This API allows you to manage your Managed Databases for MongoDB®.
 */
export declare class API extends ParentAPI {
    /**
     * Locality of this API.
     * type ∈ {'zone','region','global','unspecified'}
     */
    static readonly LOCALITY: ApiLocality;
    protected pageOfListNodeTypes: (request?: Readonly<ListNodeTypesRequest>) => Promise<ListNodeTypesResponse>;
    /**
     * List available node types.
     *
     * @param request - The request {@link ListNodeTypesRequest}
     * @returns A Promise of ListNodeTypesResponse
     */
    listNodeTypes: (request?: Readonly<ListNodeTypesRequest>) => Promise<ListNodeTypesResponse> & {
        all: () => Promise<import("./types.gen").NodeType[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").NodeType[], void, void>;
    };
    protected pageOfListVersions: (request?: Readonly<ListVersionsRequest>) => Promise<ListVersionsResponse>;
    /**
     * List available MongoDB® versions.
     *
     * @param request - The request {@link ListVersionsRequest}
     * @returns A Promise of ListVersionsResponse
     */
    listVersions: (request?: Readonly<ListVersionsRequest>) => Promise<ListVersionsResponse> & {
        all: () => Promise<import("./types.gen").Version[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<import("./types.gen").Version[], void, void>;
    };
    protected pageOfListInstances: (request?: Readonly<ListInstancesRequest>) => Promise<ListInstancesResponse>;
    /**
     * List MongoDB® Database Instances. List all MongoDB® Database Instances in the specified region. By default, the MongoDB® Database Instances returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field. You can define additional parameters for your query, such as `tags` and `name`. For the `name` parameter, the value you include will be checked against the whole name string to see if it includes the string you put in the parameter.
     *
     * @param request - The request {@link ListInstancesRequest}
     * @returns A Promise of ListInstancesResponse
     */
    listInstances: (request?: Readonly<ListInstancesRequest>) => Promise<ListInstancesResponse> & {
        all: () => Promise<Instance[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Instance[], void, void>;
    };
    /**
     * Get a MongoDB® Database Instance. Retrieve information about a given MongoDB® Database Instance, specified by the `region` and `instance_id` parameters. Its full details, including name, status, IP address and port, are returned in the response object.
     *
     * @param request - The request {@link GetInstanceRequest}
     * @returns A Promise of Instance
     */
    getInstance: (request: Readonly<GetInstanceRequest>) => Promise<Instance>;
    /**
     * Waits for {@link Instance} to be in a final state.
     *
     * @param request - The request {@link GetInstanceRequest}
     * @param options - The waiting options
     * @returns A Promise of Instance
     */
    waitForInstance: (request: Readonly<GetInstanceRequest>, options?: Readonly<WaitForOptions<Instance>>) => Promise<Instance>;
    /**
     * Create a MongoDB® Database Instance. Create a new MongoDB® Database Instance.
     *
     * @param request - The request {@link CreateInstanceRequest}
     * @returns A Promise of Instance
     */
    createInstance: (request: Readonly<CreateInstanceRequest>) => Promise<Instance>;
    /**
     * Update a MongoDB® Database Instance. Update the parameters of a MongoDB® Database Instance.
     *
     * @param request - The request {@link UpdateInstanceRequest}
     * @returns A Promise of Instance
     */
    updateInstance: (request: Readonly<UpdateInstanceRequest>) => Promise<Instance>;
    /**
     * Delete a MongoDB® Database Instance. Delete a given MongoDB® Database Instance, specified by the `region` and `instance_id` parameters. Deleting a MongoDB® Database Instance is permanent, and cannot be undone. Note that upon deletion all your data will be lost.
     *
     * @param request - The request {@link DeleteInstanceRequest}
     * @returns A Promise of Instance
     */
    deleteInstance: (request: Readonly<DeleteInstanceRequest>) => Promise<Instance>;
    /**
     * Upgrade a Database Instance. Upgrade your current Database Instance specifications like volume size.
     *
     * @param request - The request {@link UpgradeInstanceRequest}
     * @returns A Promise of Instance
     */
    upgradeInstance: (request: Readonly<UpgradeInstanceRequest>) => Promise<Instance>;
    /**
     * Get the certificate of a Database Instance. Retrieve the certificate of a given Database Instance, specified by the `instance_id` parameter.
     *
     * @param request - The request {@link GetInstanceCertificateRequest}
     * @returns A Promise of Blob
     */
    getInstanceCertificate: (request: Readonly<GetInstanceCertificateRequest>) => Promise<Blob>;
    /**
     * Create a Database Instance snapshot. Create a new snapshot of a Database Instance. You must define the `name` and `instance_id` parameters in the request.
     *
     * @param request - The request {@link CreateSnapshotRequest}
     * @returns A Promise of Snapshot
     */
    createSnapshot: (request: Readonly<CreateSnapshotRequest>) => Promise<Snapshot>;
    /**
     * Get a Database Instance snapshot. Retrieve information about a given snapshot of a Database Instance. You must specify, in the endpoint, the `snapshot_id` parameter of the snapshot you want to retrieve.
     *
     * @param request - The request {@link GetSnapshotRequest}
     * @returns A Promise of Snapshot
     */
    getSnapshot: (request: Readonly<GetSnapshotRequest>) => Promise<Snapshot>;
    /**
     * Waits for {@link Snapshot} to be in a final state.
     *
     * @param request - The request {@link GetSnapshotRequest}
     * @param options - The waiting options
     * @returns A Promise of Snapshot
     */
    waitForSnapshot: (request: Readonly<GetSnapshotRequest>, options?: Readonly<WaitForOptions<Snapshot>>) => Promise<Snapshot>;
    /**
     * Update a Database Instance snapshot. Update the parameters of a snapshot of a Database Instance. You can update the `name` and `expires_at` parameters.
     *
     * @param request - The request {@link UpdateSnapshotRequest}
     * @returns A Promise of Snapshot
     */
    updateSnapshot: (request: Readonly<UpdateSnapshotRequest>) => Promise<Snapshot>;
    /**
     * Restore a Database Instance snapshot. Restore a given snapshot of a Database Instance. You must specify, in the endpoint, the `snapshot_id` parameter of the snapshot you want to restore, the `instance_name` of the new Database Instance, `node_type` of the new Database Instance and `node_number` of the new Database Instance.
     *
     * @param request - The request {@link RestoreSnapshotRequest}
     * @returns A Promise of Instance
     */
    restoreSnapshot: (request: Readonly<RestoreSnapshotRequest>) => Promise<Instance>;
    protected pageOfListSnapshots: (request?: Readonly<ListSnapshotsRequest>) => Promise<ListSnapshotsResponse>;
    /**
     * List snapshots. List snapshots. You can include the `instance_id` or `project_id` in your query to get the list of snapshots for specific Database Instances and/or Projects. By default, the details returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
     *
     * @param request - The request {@link ListSnapshotsRequest}
     * @returns A Promise of ListSnapshotsResponse
     */
    listSnapshots: (request?: Readonly<ListSnapshotsRequest>) => Promise<ListSnapshotsResponse> & {
        all: () => Promise<Snapshot[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Snapshot[], void, void>;
    };
    /**
     * Delete a Database Instance snapshot. Delete a given snapshot of a Database Instance. You must specify, in the endpoint, the `snapshot_id` parameter of the snapshot you want to delete.
     *
     * @param request - The request {@link DeleteSnapshotRequest}
     * @returns A Promise of Snapshot
     */
    deleteSnapshot: (request: Readonly<DeleteSnapshotRequest>) => Promise<Snapshot>;
    protected pageOfListUsers: (request: Readonly<ListUsersRequest>) => Promise<ListUsersResponse>;
    /**
     * List users of a Database Instance. List all users of a given Database Instance.
     *
     * @param request - The request {@link ListUsersRequest}
     * @returns A Promise of ListUsersResponse
     */
    listUsers: (request: Readonly<ListUsersRequest>) => Promise<ListUsersResponse> & {
        all: () => Promise<User[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<User[], void, void>;
    };
    /**
     * Create an user on a Database Instance. Create an user on a Database Instance. You must define the `name`, `password` of the user and `instance_id` parameters in the request.
     *
     * @param request - The request {@link CreateUserRequest}
     * @returns A Promise of User
     */
    createUser: (request: Readonly<CreateUserRequest>) => Promise<User>;
    /**
     * Update a user on a Database Instance. Update the parameters of a user on a Database Instance. You can update the `password` parameter, but you cannot change the name of the user.
     *
     * @param request - The request {@link UpdateUserRequest}
     * @returns A Promise of User
     */
    updateUser: (request: Readonly<UpdateUserRequest>) => Promise<User>;
    /**
     * Delete a user on a Database Instance. Delete an existing user on a Database Instance.
     *
     * @param request - The request {@link DeleteUserRequest}
     */
    deleteUser: (request: Readonly<DeleteUserRequest>) => Promise<void>;
    /**
     * Apply user roles. Apply preset roles for a user in a Database Instance.
     *
     * @param request - The request {@link SetUserRoleRequest}
     * @returns A Promise of User
     */
    setUserRole: (request: Readonly<SetUserRoleRequest>) => Promise<User>;
    /**
     * Delete a Database Instance endpoint. Delete the endpoint of a Database Instance. You must specify the `endpoint_id` parameter of the endpoint you want to delete. Note that you might need to update any environment configurations that point to the deleted endpoint.
     *
     * @param request - The request {@link DeleteEndpointRequest}
     */
    deleteEndpoint: (request: Readonly<DeleteEndpointRequest>) => Promise<void>;
    /**
     * Create a new Instance endpoint. Create a new endpoint for a MongoDB® Database Instance. You can add `public_network` or `private_network` specifications to the body of the request.
     *
     * @param request - The request {@link CreateEndpointRequest}
     * @returns A Promise of Endpoint
     */
    createEndpoint: (request: Readonly<CreateEndpointRequest>) => Promise<Endpoint>;
}
