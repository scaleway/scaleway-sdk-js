"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const content_gen = require("./content.gen.cjs");
const marshalling_gen = require("./marshalling.gen.cjs");
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends sdkClient.API {
  /**
   * Locality of this API.
   * type âˆˆ {'zone','region','global','unspecified'}
   */
  static LOCALITY = sdkClient.toApiLocality({
    regions: ["fr-par", "nl-ams", "pl-waw"]
  });
  pageOfListDatabaseEngines = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/database-engines`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["version", request.version]
      )
    },
    marshalling_gen.unmarshalListDatabaseEnginesResponse
  );
  /**
   * List available database engines. List the PostgreSQL and MySQL database engines available at Scaleway.
   *
   * @param request - The request {@link ListDatabaseEnginesRequest}
   * @returns A Promise of ListDatabaseEnginesResponse
   */
  listDatabaseEngines = (request = {}) => sdkClient.enrichForPagination("engines", this.pageOfListDatabaseEngines, request);
  pageOfListNodeTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/node-types`,
      urlParams: sdkClient.urlParams(
        ["include_disabled_types", request.includeDisabledTypes],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNodeTypesResponse
  );
  /**
   * List available node types. List all available node types. By default, the node types returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListNodeTypesRequest}
   * @returns A Promise of ListNodeTypesResponse
   */
  listNodeTypes = (request) => sdkClient.enrichForPagination("nodeTypes", this.pageOfListNodeTypes, request);
  pageOfListDatabaseBackups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups`,
      urlParams: sdkClient.urlParams(
        ["instance_id", request.instanceId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListDatabaseBackupsResponse
  );
  /**
   * List database backups. List all backups in a specified region, for a given Scaleway Organization or Scaleway Project. By default, the backups listed are ordered by creation date in ascending order. This can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListDatabaseBackupsRequest}
   * @returns A Promise of ListDatabaseBackupsResponse
   */
  listDatabaseBackups = (request = {}) => sdkClient.enrichForPagination(
    "databaseBackups",
    this.pageOfListDatabaseBackups,
    request
  );
  /**
   * Create a database backup. Create a new backup. You must set the `instance_id`, `database_name`, `name` and `expires_at` parameters.
   *
   * @param request - The request {@link CreateDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  createDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Get a database backup. Retrieve information about a given backup, specified by its database backup ID and region. Full details about the backup, like size, URL and expiration date, are returned in the response.
   *
   * @param request - The request {@link GetDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  getDatabaseBackup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${sdkClient.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Waits for {@link DatabaseBackup} to be in a final state.
   *
   * @param request - The request {@link GetDatabaseBackupRequest}
   * @param options - The waiting options
   * @returns A Promise of DatabaseBackup
   */
  waitForDatabaseBackup = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.DATABASE_BACKUP_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getDatabaseBackup,
    request,
    options
  );
  /**
   * Update a database backup. Update the parameters of a backup, including name and expiration date.
   *
   * @param request - The request {@link UpdateDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  updateDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${sdkClient.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Delete a database backup. Delete a backup, specified by its database backup ID and region. Deleting a backup is permanent, and cannot be undone.
   *
   * @param request - The request {@link DeleteDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  deleteDatabaseBackup = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${sdkClient.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Restore a database backup. Launch the process of restoring database backup. You must specify the `instance_id` of the Database Instance of destination, where the backup will be restored. Note that large database backups can take up to several hours to restore.
   *
   * @param request - The request {@link RestoreDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  restoreDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRestoreDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${sdkClient.validatePathParam("databaseBackupId", request.databaseBackupId)}/restore`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Export a database backup. Export a backup, specified by the `database_backup_id` and the `region` parameters. The download URL is returned in the response.
   *
   * @param request - The request {@link ExportDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  exportDatabaseBackup = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${sdkClient.validatePathParam("databaseBackupId", request.databaseBackupId)}/export`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Upgrade a Database Instance. Upgrade your current Database Instance specifications like node type, high availability, volume, or the database engine version. Note that upon upgrade the `enable_ha` parameter can only be set to `true`.
   *
   * @param request - The request {@link UpgradeInstanceRequest}
   * @returns A Promise of Instance
   */
  upgradeInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradeInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/upgrade`
    },
    marshalling_gen.unmarshalInstance
  );
  pageOfListInstances = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`,
      urlParams: sdkClient.urlParams(
        ["has_maintenances", request.hasMaintenances],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListInstancesResponse
  );
  /**
   * List Database Instances. List all Database Instances in the specified region, for a given Scaleway Organization or Scaleway Project. By default, the Database Instances returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field. You can define additional parameters for your query, such as `tags` and `name`. For the `name` parameter, the value you include will be checked against the whole name string to see if it includes the string you put in the parameter.
   *
   * @param request - The request {@link ListInstancesRequest}
   * @returns A Promise of ListInstancesResponse
   */
  listInstances = (request = {}) => sdkClient.enrichForPagination("instances", this.pageOfListInstances, request);
  /**
   * Get a Database Instance. Retrieve information about a given Database Instance, specified by the `region` and `instance_id` parameters. Its full details, including name, status, IP address and port, are returned in the response object.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @returns A Promise of Instance
   */
  getInstance = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Waits for {@link Instance} to be in a final state.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @param options - The waiting options
   * @returns A Promise of Instance
   */
  waitForInstance = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.INSTANCE_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getInstance,
    request,
    options
  );
  /**
   * Create a Database Instance. Create a new Database Instance. You must set the `engine`, `user_name`, `password` and `node_type` parameters. Optionally, you can specify the volume type and size.
   *
   * @param request - The request {@link CreateInstanceRequest}
   * @returns A Promise of Instance
   */
  createInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Update a Database Instance. Update the parameters of a Database Instance, including name, tags and backup schedule details.
   *
   * @param request - The request {@link UpdateInstanceRequest}
   * @returns A Promise of Instance
   */
  updateInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Delete a Database Instance. Delete a given Database Instance, specified by the `region` and `instance_id` parameters. Deleting a Database Instance is permanent, and cannot be undone. Note that upon deletion all your data will be lost.
   *
   * @param request - The request {@link DeleteInstanceRequest}
   * @returns A Promise of Instance
   */
  deleteInstance = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Clone a Database Instance. Clone a given Database Instance, specified by the `region` and `instance_id` parameters. The clone feature allows you to create a new Database Instance from an existing one. The clone includes all existing databases, users and permissions. You can create a clone on a Database Instance bigger than your current one.
   *
   * @param request - The request {@link CloneInstanceRequest}
   * @returns A Promise of Instance
   */
  cloneInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCloneInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/clone`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Restart Database Instance. Restart a given Database Instance, specified by the `region` and `instance_id` parameters. The status of the Database Instance returned in the response.
   *
   * @param request - The request {@link RestartInstanceRequest}
   * @returns A Promise of Instance
   */
  restartInstance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/restart`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Get the TLS certificate of a Database Instance. Retrieve information about the TLS certificate of a given Database Instance. Details like name and content are returned in the response.
   *
   * @param request - The request {@link GetInstanceCertificateRequest}
   * @returns A Promise of Blob
   */
  getInstanceCertificate = (request) => this.client.fetch({
    method: "GET",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/certificate`,
    urlParams: sdkClient.urlParams(["dl", 1]),
    responseType: "blob"
  });
  /**
   * Renew the TLS certificate of a Database Instance. Renew a TLS for a Database Instance. Renewing a certificate means that you will not be able to connect to your Database Instance using the previous certificate. You will also need to download and update the new certificate for all database clients.
   *
   * @param request - The request {@link RenewInstanceCertificateRequest}
   */
  renewInstanceCertificate = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/renew-certificate`
  });
  /**
   * Get Database Instance metrics. Retrieve the time series metrics of a given Database Instance. You can define the period from which to retrieve metrics by specifying the `start_date` and `end_date`.
   *
   * @param request - The request {@link GetInstanceMetricsRequest}
   * @returns A Promise of InstanceMetrics
   */
  getInstanceMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/metrics`,
      urlParams: sdkClient.urlParams(
        ["end_date", request.endDate],
        ["metric_name", request.metricName],
        ["start_date", request.startDate]
      )
    },
    marshalling_gen.unmarshalInstanceMetrics
  );
  /**
   * Create a Read Replica. Create a new Read Replica of a Database Instance. You must specify the `region` and the `instance_id`. You can only create a maximum of 3 Read Replicas per Database Instance.
   *
   * @param request - The request {@link CreateReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplica = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Get a Read Replica. Retrieve information about a Database Instance Read Replica. Full details about the Read Replica, like `endpoints`, `status`  and `region` are returned in the response.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  getReadReplica = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${sdkClient.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Waits for {@link ReadReplica} to be in a final state.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @param options - The waiting options
   * @returns A Promise of ReadReplica
   */
  waitForReadReplica = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.READ_REPLICA_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getReadReplica,
    request,
    options
  );
  /**
   * Delete a Read Replica. Delete a Read Replica of a Database Instance. You must specify the `region` and `read_replica_id` parameters of the Read Replica you want to delete.
   *
   * @param request - The request {@link DeleteReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  deleteReadReplica = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${sdkClient.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
     * Resync a Read Replica. When you resync a Read Replica, first it is reset, then its data is resynchronized from the primary node. Your Read Replica remains unavailable during the resync process. The duration of this process is proportional to the size of your Database Instance.
  The configured endpoints do not change.
     *
     * @param request - The request {@link ResetReadReplicaRequest}
     * @returns A Promise of ReadReplica
     */
  resetReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${sdkClient.validatePathParam("readReplicaId", request.readReplicaId)}/reset`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Promote a Read Replica. Promote a Read Replica to Database Instance automatically.
   *
   * @param request - The request {@link PromoteReadReplicaRequest}
   * @returns A Promise of Instance
   */
  promoteReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${sdkClient.validatePathParam("readReplicaId", request.readReplicaId)}/promote`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create an endpoint for a Read Replica. Create a new endpoint for a Read Replica. Read Replicas can have at most one direct access and one Private Network endpoint.
   *
   * @param request - The request {@link CreateReadReplicaEndpointRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplicaEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaEndpointRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${sdkClient.validatePathParam("readReplicaId", request.readReplicaId)}/endpoints`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Prepare logs of a Database Instance. Prepare your Database Instance logs. You can define the `start_date` and `end_date` parameters for your query. The download URL is returned in the response. Logs are recorded from 00h00 to 23h59 and then aggregated in a `.log` file once a day. Therefore, even if you specify a timeframe from which you want to get the logs, you will receive logs from the full 24 hours.
   *
   * @param request - The request {@link PrepareInstanceLogsRequest}
   * @returns A Promise of PrepareInstanceLogsResponse
   */
  prepareInstanceLogs = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrepareInstanceLogsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/prepare-logs`
    },
    marshalling_gen.unmarshalPrepareInstanceLogsResponse
  );
  /**
   * List available logs of a Database Instance. List the available logs of a Database Instance. By default, the logs returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListInstanceLogsRequest}
   * @returns A Promise of ListInstanceLogsResponse
   */
  listInstanceLogs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/logs`,
      urlParams: sdkClient.urlParams(["order_by", request.orderBy])
    },
    marshalling_gen.unmarshalListInstanceLogsResponse
  );
  /**
   * Get given logs of a Database Instance. Retrieve information about the logs of a Database Instance. Specify the `instance_log_id` and `region` in your request to get information such as `download_url`, `status`, `expires_at` and `created_at` about your logs in the response.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @returns A Promise of InstanceLog
   */
  getInstanceLog = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/logs/${sdkClient.validatePathParam("instanceLogId", request.instanceLogId)}`
    },
    marshalling_gen.unmarshalInstanceLog
  );
  /**
   * Waits for {@link InstanceLog} to be in a final state.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @param options - The waiting options
   * @returns A Promise of InstanceLog
   */
  waitForInstanceLog = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.INSTANCE_LOG_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getInstanceLog,
    request,
    options
  );
  /**
   * Purge remote Database Instance logs. Purge a given remote log from a Database Instance. You can specify the `log_name` of the log you wish to clean from your Database Instance.
   *
   * @param request - The request {@link PurgeInstanceLogsRequest}
   */
  purgeInstanceLogs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalPurgeInstanceLogsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/purge-logs`
  });
  /**
   * List remote Database Instance logs details. List remote log details. By default, the details returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListInstanceLogsDetailsRequest}
   * @returns A Promise of ListInstanceLogsDetailsResponse
   */
  listInstanceLogsDetails = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/logs-details`
    },
    marshalling_gen.unmarshalListInstanceLogsDetailsResponse
  );
  /**
   * Add Database Instance advanced settings. Add an advanced setting to a Database Instance. You must set the `name` and the `value` of each setting.
   *
   * @param request - The request {@link AddInstanceSettingsRequest}
   * @returns A Promise of AddInstanceSettingsResponse
   */
  addInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalAddInstanceSettingsResponse
  );
  /**
   * Delete Database Instance advanced settings. Delete an advanced setting in a Database Instance. You must specify the names of the settings you want to delete in the request.
   *
   * @param request - The request {@link DeleteInstanceSettingsRequest}
   * @returns A Promise of DeleteInstanceSettingsResponse
   */
  deleteInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalDeleteInstanceSettingsResponse
  );
  /**
   * Set Database Instance advanced settings. Update an advanced setting for a Database Instance. Settings added upon database engine initialization can only be defined once, and cannot, therefore, be updated.
   *
   * @param request - The request {@link SetInstanceSettingsRequest}
   * @returns A Promise of SetInstanceSettingsResponse
   */
  setInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalSetInstanceSettingsResponse
  );
  pageOfListInstanceACLRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/acls`,
      urlParams: sdkClient.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListInstanceACLRulesResponse
  );
  /**
   * List ACL rules of a Database Instance. List the ACL rules for a given Database Instance. The response is an array of ACL objects, each one representing an ACL that denies, allows or redirects traffic based on certain conditions.
   *
   * @param request - The request {@link ListInstanceACLRulesRequest}
   * @returns A Promise of ListInstanceACLRulesResponse
   */
  listInstanceACLRules = (request) => sdkClient.enrichForPagination("rules", this.pageOfListInstanceACLRules, request);
  /**
   * Add an ACL rule to a Database Instance. Add an additional ACL rule to a Database Instance.
   *
   * @param request - The request {@link AddInstanceACLRulesRequest}
   * @returns A Promise of AddInstanceACLRulesResponse
   */
  addInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalAddInstanceACLRulesResponse
  );
  /**
   * Set ACL rules for a Database Instance. Replace all the ACL rules of a Database Instance.
   *
   * @param request - The request {@link SetInstanceACLRulesRequest}
   * @returns A Promise of SetInstanceACLRulesResponse
   */
  setInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalSetInstanceACLRulesResponse
  );
  /**
   * Delete ACL rules of a Database Instance. Delete one or more ACL rules of a Database Instance.
   *
   * @param request - The request {@link DeleteInstanceACLRulesRequest}
   * @returns A Promise of DeleteInstanceACLRulesResponse
   */
  deleteInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalDeleteInstanceACLRulesResponse
  );
  pageOfListUsers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/users`,
      urlParams: sdkClient.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListUsersResponse
  );
  /**
   * List users of a Database Instance. List all users of a given Database Instance. By default, the users returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListUsersRequest}
   * @returns A Promise of ListUsersResponse
   */
  listUsers = (request) => sdkClient.enrichForPagination("users", this.pageOfListUsers, request);
  /**
   * Create a user for a Database Instance. Create a new user for a Database Instance. You must define the `name`, `password` and `is_admin` parameters.
   *
   * @param request - The request {@link CreateUserRequest}
   * @returns A Promise of User
   */
  createUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/users`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Update a user on a Database Instance. Update the parameters of a user on a Database Instance. You can update the `password` and `is_admin` parameters, but you cannot change the name of the user.
   *
   * @param request - The request {@link UpdateUserRequest}
   * @returns A Promise of User
   */
  updateUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/users/${sdkClient.validatePathParam("name", request.name)}`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Delete a user on a Database Instance. Delete a given user on a Database Instance. You must specify, in the endpoint,  the `region`, `instance_id` and `name` parameters of the user you want to delete.
   *
   * @param request - The request {@link DeleteUserRequest}
   */
  deleteUser = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/users/${sdkClient.validatePathParam("name", request.name)}`
  });
  pageOfListDatabases = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/databases`,
      urlParams: sdkClient.urlParams(
        ["managed", request.managed],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["owner", request.owner],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDatabasesResponse
  );
  /**
   * List databases in a Database Instance. List all databases of a given Database Instance. By default, the databases returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field. You can define additional parameters for your query, such as `name`, `managed` and `owner`.
   *
   * @param request - The request {@link ListDatabasesRequest}
   * @returns A Promise of ListDatabasesResponse
   */
  listDatabases = (request) => sdkClient.enrichForPagination("databases", this.pageOfListDatabases, request);
  /**
   * Create a database in a Database Instance. Create a new database. You must define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateDatabaseRequest}
   * @returns A Promise of Database
   */
  createDatabase = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/databases`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Delete a database in a Database Instance. Delete a given database on a Database Instance. You must specify, in the endpoint, the `region`, `instance_id` and `name` parameters of the database you want to delete.
   *
   * @param request - The request {@link DeleteDatabaseRequest}
   */
  deleteDatabase = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/databases/${sdkClient.validatePathParam("name", request.name)}`
  });
  pageOfListPrivileges = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/privileges`,
      urlParams: sdkClient.urlParams(
        ["database_name", request.databaseName],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["user_name", request.userName]
      )
    },
    marshalling_gen.unmarshalListPrivilegesResponse
  );
  /**
   * List user privileges for a database. List privileges of a user on a database. By default, the details returned in the list are ordered by creation date in ascending order, though this can be modified via the order_by field. You can define additional parameters for your query, such as `database_name` and `user_name`.
   *
   * @param request - The request {@link ListPrivilegesRequest}
   * @returns A Promise of ListPrivilegesResponse
   */
  listPrivileges = (request) => sdkClient.enrichForPagination("privileges", this.pageOfListPrivileges, request);
  /**
   * Set user privileges for a database. Set the privileges of a user on a database. You must define `database_name`, `user_name` and `permission` in the request body.
   *
   * @param request - The request {@link SetPrivilegeRequest}
   * @returns A Promise of Privilege
   */
  setPrivilege = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPrivilegeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/privileges`
    },
    marshalling_gen.unmarshalPrivilege
  );
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots`,
      urlParams: sdkClient.urlParams(
        ["instance_id", request.instanceId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List snapshots. List snapshots. You can include the `instance_id` or `project_id` in your query to get the list of snapshots for specific Database Instances and/or Projects. By default, the details returned in the list are ordered by creation date in ascending order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => sdkClient.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Get a Database Instance snapshot. Retrieve information about a given snapshot, specified by its `snapshot_id` and `region`. Full details about the snapshot, like size and expiration date, are returned in the response.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Waits for {@link Snapshot} to be in a final state.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @param options - The waiting options
   * @returns A Promise of Snapshot
   */
  waitForSnapshot = (request, options) => sdkClient.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getSnapshot,
    request,
    options
  );
  /**
   * Create a Database Instance snapshot. Create a new snapshot of a Database Instance. You must define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  createSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/snapshots`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Update a Database Instance snapshot. Update the parameters of a snapshot of a Database Instance. You can update the `name` and `expires_at` parameters.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Delete a Database Instance snapshot. Delete a given snapshot of a Database Instance. You must specify, in the endpoint,  the `region` and `snapshot_id` parameters of the snapshot you want to delete.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  deleteSnapshot = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Create a new Database Instance from a snapshot. Restore a snapshot. When you restore a snapshot, a new Instance is created and billed to your account. Note that is possible to select a larger node type for your new Database Instance. However, the Block volume size will be the same as the size of the restored snapshot. All Instance settings will be restored if you chose a node type with the same or more memory size than the initial Instance. Settings will be reset to the default if your node type has less memory.
   *
   * @param request - The request {@link CreateInstanceFromSnapshotRequest}
   * @returns A Promise of Instance
   */
  createInstanceFromSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceFromSnapshotRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${sdkClient.validatePathParam("snapshotId", request.snapshotId)}/create-instance`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create a new Database Instance endpoint. Create a new endpoint for a Database Instance. You can add `load_balancer` and `private_network` specifications to the body of the request.
   *
   * @param request - The request {@link CreateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  createEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/endpoints`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Delete a Database Instance endpoint. Delete the endpoint of a Database Instance. You must specify the `region` and `endpoint_id` parameters of the endpoint you want to delete. Note that might need to update any environment configurations that point to the deleted endpoint.
   *
   * @param request - The request {@link DeleteEndpointRequest}
   */
  deleteEndpoint = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${sdkClient.validatePathParam("endpointId", request.endpointId)}`
  });
  /**
   * Get a Database Instance endpoint. Retrieve information about a Database Instance endpoint. Full details about the endpoint, like `ip`, `port`, `private_network` and `load_balancer` specifications are returned in the response.
   *
   * @param request - The request {@link GetEndpointRequest}
   * @returns A Promise of Endpoint
   */
  getEndpoint = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${sdkClient.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Migrate an existing instance endpoint to another instance.
   *
   * @param request - The request {@link MigrateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  migrateEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMigrateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${sdkClient.validatePathParam("endpointId", request.endpointId)}/migrate`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Apply Database Instance maintenance. Apply maintenance tasks to your Database Instance. This will trigger pending maintenance tasks to start in your Database Instance and can generate service interruption. Maintenance tasks can be applied between `starts_at` and `stops_at` times, and are run directly by Scaleway at `forced_at` timestamp.
   *
   * @param request - The request {@link ApplyInstanceMaintenanceRequest}
   * @returns A Promise of Maintenance
   */
  applyInstanceMaintenance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${sdkClient.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${sdkClient.validatePathParam("instanceId", request.instanceId)}/apply-maintenance`
    },
    marshalling_gen.unmarshalMaintenance
  );
}
exports.API = API;
