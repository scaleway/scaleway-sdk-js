import randomName from "@scaleway/random-name";
import { resolveOneOf, isJSONObject, unmarshalArrayOfObject, unmarshalDate, unmarshalTimeSeries } from "@scaleway/sdk-client";
const unmarshalEndpointDirectAccessDetails = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointDirectAccessDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointLoadBalancerDetails = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointLoadBalancerDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointPrivateNetworkDetails = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id,
    provisioningMode: data.provisioning_mode,
    serviceIp: data.service_ip,
    zone: data.zone
  };
};
const unmarshalEndpoint = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    directAccess: data.direct_access ? unmarshalEndpointDirectAccessDetails(data.direct_access) : void 0,
    hostname: data.hostname,
    id: data.id,
    ip: data.ip,
    loadBalancer: data.load_balancer ? unmarshalEndpointLoadBalancerDetails(data.load_balancer) : void 0,
    name: data.name,
    port: data.port,
    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0
  };
};
const unmarshalMaintenance = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Maintenance' failed as data isn't a dictionary.`
    );
  }
  return {
    closedAt: unmarshalDate(data.closed_at),
    forcedAt: unmarshalDate(data.forced_at),
    isApplicable: data.is_applicable,
    reason: data.reason,
    startsAt: unmarshalDate(data.starts_at),
    status: data.status,
    stopsAt: unmarshalDate(data.stops_at)
  };
};
const unmarshalReadReplica = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ReadReplica' failed as data isn't a dictionary.`
    );
  }
  return {
    endpoints: unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    id: data.id,
    instanceId: data.instance_id,
    region: data.region,
    sameZone: data.same_zone,
    status: data.status
  };
};
const unmarshalDatabaseBackup = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseBackup' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: unmarshalDate(data.created_at),
    databaseName: data.database_name,
    downloadUrl: data.download_url,
    downloadUrlExpiresAt: unmarshalDate(data.download_url_expires_at),
    expiresAt: unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    region: data.region,
    sameRegion: data.same_region,
    size: data.size,
    status: data.status,
    updatedAt: unmarshalDate(data.updated_at)
  };
};
const unmarshalDatabase = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`
    );
  }
  return {
    managed: data.managed,
    name: data.name,
    owner: data.owner,
    size: data.size
  };
};
const unmarshalInstanceLog = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceLog' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: unmarshalDate(data.created_at),
    downloadUrl: data.download_url,
    expiresAt: unmarshalDate(data.expires_at),
    id: data.id,
    nodeName: data.node_name,
    region: data.region,
    status: data.status
  };
};
const unmarshalBackupSchedule = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BackupSchedule' failed as data isn't a dictionary.`
    );
  }
  return {
    disabled: data.disabled,
    frequency: data.frequency,
    nextRunAt: unmarshalDate(data.next_run_at),
    retention: data.retention
  };
};
const unmarshalEncryptionAtRest = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EncryptionAtRest' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled
  };
};
const unmarshalInstanceSetting = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    value: data.value
  };
};
const unmarshalLogsPolicy = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LogsPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    maxAgeRetention: data.max_age_retention,
    totalDiskRetention: data.total_disk_retention
  };
};
const unmarshalUpgradableVersion = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpgradableVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    minorVersion: data.minor_version,
    name: data.name,
    version: data.version
  };
};
const unmarshalVolume = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    size: data.size,
    type: data.type
  };
};
const unmarshalInstance = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`
    );
  }
  return {
    backupSameRegion: data.backup_same_region,
    backupSchedule: data.backup_schedule ? unmarshalBackupSchedule(data.backup_schedule) : void 0,
    createdAt: unmarshalDate(data.created_at),
    encryption: data.encryption ? unmarshalEncryptionAtRest(data.encryption) : void 0,
    endpoint: data.endpoint ? unmarshalEndpoint(data.endpoint) : void 0,
    endpoints: unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    engine: data.engine,
    id: data.id,
    initSettings: unmarshalArrayOfObject(
      data.init_settings,
      unmarshalInstanceSetting
    ),
    isHaCluster: data.is_ha_cluster,
    logsPolicy: data.logs_policy ? unmarshalLogsPolicy(data.logs_policy) : void 0,
    maintenances: unmarshalArrayOfObject(
      data.maintenances,
      unmarshalMaintenance
    ),
    name: data.name,
    nodeType: data.node_type,
    organizationId: data.organization_id,
    projectId: data.project_id,
    readReplicas: unmarshalArrayOfObject(
      data.read_replicas,
      unmarshalReadReplica
    ),
    region: data.region,
    settings: unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting),
    status: data.status,
    tags: data.tags,
    upgradableVersion: unmarshalArrayOfObject(
      data.upgradable_version,
      unmarshalUpgradableVersion
    ),
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalPrivilege = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Privilege' failed as data isn't a dictionary.`
    );
  }
  return {
    databaseName: data.database_name,
    permission: data.permission,
    userName: data.user_name
  };
};
const unmarshalSnapshotVolumeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    type: data.type
  };
};
const unmarshalSnapshot = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: unmarshalDate(data.created_at),
    expiresAt: unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    nodeType: data.node_type,
    region: data.region,
    size: data.size,
    status: data.status,
    updatedAt: unmarshalDate(data.updated_at),
    volumeType: data.volume_type ? unmarshalSnapshotVolumeType(data.volume_type) : void 0
  };
};
const unmarshalUser = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'User' failed as data isn't a dictionary.`
    );
  }
  return {
    isAdmin: data.is_admin,
    name: data.name
  };
};
const unmarshalACLRule = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    description: data.description,
    direction: data.direction,
    ip: data.ip,
    port: data.port,
    protocol: data.protocol
  };
};
const unmarshalAddInstanceACLRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalAddInstanceSettingsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalDeleteInstanceACLRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalDeleteInstanceSettingsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalInstanceMetrics = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceMetrics' failed as data isn't a dictionary.`
    );
  }
  return {
    timeseries: unmarshalArrayOfObject(data.timeseries, unmarshalTimeSeries)
  };
};
const unmarshalListDatabaseBackupsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseBackupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databaseBackups: unmarshalArrayOfObject(
      data.database_backups,
      unmarshalDatabaseBackup
    ),
    totalCount: data.total_count
  };
};
const unmarshalEngineSetting = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    defaultValue: data.default_value,
    description: data.description,
    floatMax: data.float_max,
    floatMin: data.float_min,
    hotConfigurable: data.hot_configurable,
    intMax: data.int_max,
    intMin: data.int_min,
    name: data.name,
    propertyType: data.property_type,
    stringConstraint: data.string_constraint,
    unit: data.unit
  };
};
const unmarshalEngineVersion = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    availableInitSettings: unmarshalArrayOfObject(
      data.available_init_settings,
      unmarshalEngineSetting
    ),
    availableSettings: unmarshalArrayOfObject(
      data.available_settings,
      unmarshalEngineSetting
    ),
    beta: data.beta,
    disabled: data.disabled,
    endOfLife: unmarshalDate(data.end_of_life),
    name: data.name,
    version: data.version
  };
};
const unmarshalDatabaseEngine = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseEngine' failed as data isn't a dictionary.`
    );
  }
  return {
    logoUrl: data.logo_url,
    name: data.name,
    region: data.region,
    versions: unmarshalArrayOfObject(data.versions, unmarshalEngineVersion)
  };
};
const unmarshalListDatabaseEnginesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseEnginesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    engines: unmarshalArrayOfObject(data.engines, unmarshalDatabaseEngine),
    totalCount: data.total_count
  };
};
const unmarshalListDatabasesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databases: unmarshalArrayOfObject(data.databases, unmarshalDatabase),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceACLRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalACLRule),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceLogsDetailsResponseInstanceLogDetail = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponseInstanceLogDetail' failed as data isn't a dictionary.`
    );
  }
  return {
    logName: data.log_name,
    size: data.size
  };
};
const unmarshalListInstanceLogsDetailsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    details: unmarshalArrayOfObject(
      data.details,
      unmarshalListInstanceLogsDetailsResponseInstanceLogDetail
    )
  };
};
const unmarshalListInstanceLogsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instanceLogs: unmarshalArrayOfObject(
      data.instance_logs,
      unmarshalInstanceLog
    )
  };
};
const unmarshalListInstancesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instances: unmarshalArrayOfObject(data.instances, unmarshalInstance),
    totalCount: data.total_count
  };
};
const unmarshalNodeTypeVolumeConstraintSizes = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeConstraintSizes' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSize: data.max_size,
    minSize: data.min_size
  };
};
const unmarshalNodeTypeVolumeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    chunkSize: data.chunk_size,
    class: data.class,
    description: data.description,
    maxSize: data.max_size,
    minSize: data.min_size,
    type: data.type
  };
};
const unmarshalNodeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    availableVolumeTypes: unmarshalArrayOfObject(
      data.available_volume_types,
      unmarshalNodeTypeVolumeType
    ),
    beta: data.beta,
    description: data.description,
    disabled: data.disabled,
    generation: data.generation,
    instanceRange: data.instance_range,
    isBssdCompatible: data.is_bssd_compatible,
    isHaRequired: data.is_ha_required,
    memory: data.memory,
    name: data.name,
    region: data.region,
    stockStatus: data.stock_status,
    vcpus: data.vcpus,
    volumeConstraint: data.volume_constraint ? unmarshalNodeTypeVolumeConstraintSizes(data.volume_constraint) : void 0
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalListPrivilegesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivilegesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privileges: unmarshalArrayOfObject(data.privileges, unmarshalPrivilege),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListUsersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    users: unmarshalArrayOfObject(data.users, unmarshalUser)
  };
};
const unmarshalPrepareInstanceLogsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrepareInstanceLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instanceLogs: unmarshalArrayOfObject(
      data.instance_logs,
      unmarshalInstanceLog
    )
  };
};
const unmarshalSetInstanceACLRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalSetInstanceSettingsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const marshalACLRuleRequest = (request, defaults) => ({
  description: request.description,
  ip: request.ip
});
const marshalAddInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalInstanceSetting = (request, defaults) => ({
  name: request.name,
  value: request.value
});
const marshalAddInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalCloneInstanceRequest = (request, defaults) => ({
  name: request.name,
  node_type: request.nodeType
});
const marshalCreateDatabaseBackupRequest = (request, defaults) => ({
  database_name: request.databaseName,
  expires_at: request.expiresAt,
  instance_id: request.instanceId,
  name: request.name || randomName("bkp")
});
const marshalCreateDatabaseRequest = (request, defaults) => ({
  name: request.name
});
const marshalEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalEndpointSpecLoadBalancer = (request, defaults) => ({});
const marshalEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalEndpointSpec = (request, defaults) => ({
  ...resolveOneOf([
    {
      param: "load_balancer",
      value: request.loadBalancer !== void 0 ? marshalEndpointSpecLoadBalancer(request.loadBalancer) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0
    }
  ])
});
const marshalCreateEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? marshalEndpointSpec(request.endpointSpec) : void 0
});
const marshalCreateInstanceFromSnapshotRequest = (request, defaults) => ({
  instance_name: request.instanceName,
  is_ha_cluster: request.isHaCluster,
  node_type: request.nodeType
});
const marshalEncryptionAtRest = (request, defaults) => ({
  enabled: request.enabled
});
const marshalCreateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  disable_backup: request.disableBackup,
  encryption: request.encryption !== void 0 ? marshalEncryptionAtRest(request.encryption) : void 0,
  engine: request.engine,
  init_endpoints: request.initEndpoints !== void 0 ? request.initEndpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,
  init_settings: request.initSettings !== void 0 ? request.initSettings.map((elt) => marshalInstanceSetting(elt)) : void 0,
  is_ha_cluster: request.isHaCluster,
  name: request.name || randomName("ins"),
  node_type: request.nodeType,
  password: request.password,
  tags: request.tags,
  user_name: request.userName,
  volume_size: request.volumeSize,
  volume_type: request.volumeType,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecDirectAccess = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalReadReplicaEndpointSpec = (request, defaults) => ({
  ...resolveOneOf([
    {
      param: "direct_access",
      value: request.directAccess !== void 0 ? marshalReadReplicaEndpointSpecDirectAccess(
        request.directAccess
      ) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetwork(
        request.privateNetwork
      ) : void 0
    }
  ])
});
const marshalCreateReadReplicaEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  )
});
const marshalCreateReadReplicaRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  ) : void 0,
  instance_id: request.instanceId,
  same_zone: request.sameZone
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name || randomName("snp")
});
const marshalCreateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  name: request.name,
  password: request.password
});
const marshalDeleteInstanceACLRulesRequest = (request, defaults) => ({
  acl_rule_ips: request.aclRuleIps
});
const marshalDeleteInstanceSettingsRequest = (request, defaults) => ({
  setting_names: request.settingNames
});
const marshalMigrateEndpointRequest = (request, defaults) => ({
  instance_id: request.instanceId
});
const marshalPrepareInstanceLogsRequest = (request, defaults) => ({
  end_date: request.endDate,
  start_date: request.startDate
});
const marshalPurgeInstanceLogsRequest = (request, defaults) => ({
  log_name: request.logName
});
const marshalRestoreDatabaseBackupRequest = (request, defaults) => ({
  database_name: request.databaseName,
  instance_id: request.instanceId
});
const marshalSetInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalSetInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalSetPrivilegeRequest = (request, defaults) => ({
  database_name: request.databaseName,
  permission: request.permission,
  user_name: request.userName
});
const marshalUpdateDatabaseBackupRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalLogsPolicy = (request, defaults) => ({
  max_age_retention: request.maxAgeRetention,
  total_disk_retention: request.totalDiskRetention
});
const marshalUpdateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  backup_schedule_frequency: request.backupScheduleFrequency,
  backup_schedule_retention: request.backupScheduleRetention,
  backup_schedule_start_hour: request.backupScheduleStartHour,
  is_backup_schedule_disabled: request.isBackupScheduleDisabled,
  logs_policy: request.logsPolicy !== void 0 ? marshalLogsPolicy(request.logsPolicy) : void 0,
  name: request.name,
  tags: request.tags
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalUpdateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  password: request.password
});
const marshalUpgradeInstanceRequestMajorUpgradeWorkflow = (request, defaults) => ({
  upgradable_version_id: request.upgradableVersionId,
  with_endpoints: request.withEndpoints
});
const marshalUpgradeInstanceRequest = (request, defaults) => ({
  ...resolveOneOf([
    { param: "node_type", value: request.nodeType },
    { param: "enable_ha", value: request.enableHa },
    { param: "volume_size", value: request.volumeSize },
    { param: "volume_type", value: request.volumeType },
    { param: "upgradable_version_id", value: request.upgradableVersionId },
    {
      param: "major_upgrade_workflow",
      value: request.majorUpgradeWorkflow !== void 0 ? marshalUpgradeInstanceRequestMajorUpgradeWorkflow(
        request.majorUpgradeWorkflow
      ) : void 0
    },
    { param: "enable_encryption", value: request.enableEncryption }
  ])
});
export {
  marshalAddInstanceACLRulesRequest,
  marshalAddInstanceSettingsRequest,
  marshalCloneInstanceRequest,
  marshalCreateDatabaseBackupRequest,
  marshalCreateDatabaseRequest,
  marshalCreateEndpointRequest,
  marshalCreateInstanceFromSnapshotRequest,
  marshalCreateInstanceRequest,
  marshalCreateReadReplicaEndpointRequest,
  marshalCreateReadReplicaRequest,
  marshalCreateSnapshotRequest,
  marshalCreateUserRequest,
  marshalDeleteInstanceACLRulesRequest,
  marshalDeleteInstanceSettingsRequest,
  marshalMigrateEndpointRequest,
  marshalPrepareInstanceLogsRequest,
  marshalPurgeInstanceLogsRequest,
  marshalRestoreDatabaseBackupRequest,
  marshalSetInstanceACLRulesRequest,
  marshalSetInstanceSettingsRequest,
  marshalSetPrivilegeRequest,
  marshalUpdateDatabaseBackupRequest,
  marshalUpdateInstanceRequest,
  marshalUpdateSnapshotRequest,
  marshalUpdateUserRequest,
  marshalUpgradeInstanceRequest,
  unmarshalACLRule,
  unmarshalAddInstanceACLRulesResponse,
  unmarshalAddInstanceSettingsResponse,
  unmarshalBackupSchedule,
  unmarshalDatabase,
  unmarshalDatabaseBackup,
  unmarshalDeleteInstanceACLRulesResponse,
  unmarshalDeleteInstanceSettingsResponse,
  unmarshalEndpoint,
  unmarshalInstance,
  unmarshalInstanceLog,
  unmarshalInstanceMetrics,
  unmarshalListDatabaseBackupsResponse,
  unmarshalListDatabaseEnginesResponse,
  unmarshalListDatabasesResponse,
  unmarshalListInstanceACLRulesResponse,
  unmarshalListInstanceLogsDetailsResponse,
  unmarshalListInstanceLogsResponse,
  unmarshalListInstancesResponse,
  unmarshalListNodeTypesResponse,
  unmarshalListPrivilegesResponse,
  unmarshalListSnapshotsResponse,
  unmarshalListUsersResponse,
  unmarshalMaintenance,
  unmarshalPrepareInstanceLogsResponse,
  unmarshalPrivilege,
  unmarshalReadReplica,
  unmarshalSetInstanceACLRulesResponse,
  unmarshalSetInstanceSettingsResponse,
  unmarshalSnapshot,
  unmarshalUser
};
