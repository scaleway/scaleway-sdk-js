import { API as ParentAPI } from '@scaleway/sdk-client';
import type { ApiLocality, WaitForOptions } from '@scaleway/sdk-client';
import type { CreateNamespaceRequest, DeleteImageRequest, DeleteNamespaceRequest, DeleteTagRequest, GetImageRequest, GetNamespaceRequest, GetTagRequest, Image, ListImagesRequest, ListImagesResponse, ListNamespacesRequest, ListNamespacesResponse, ListTagsRequest, ListTagsResponse, Namespace, Tag, UpdateImageRequest, UpdateNamespaceRequest } from './types.gen';
/**
 * Container Registry API.

This API allows you to manage your Container Registry resources.
 */
export declare class API extends ParentAPI {
    /**
     * Locality of this API.
     * type âˆˆ {'zone','region','global','unspecified'}
     */
    static readonly LOCALITY: ApiLocality;
    protected pageOfListNamespaces: (request?: Readonly<ListNamespacesRequest>) => Promise<ListNamespacesResponse>;
    /**
     * List namespaces. List all namespaces in a specified region. By default, the namespaces listed are ordered by creation date in ascending order. This can be modified via the order_by field. You can also define additional parameters for your query, such as the `instance_id` and `project_id` parameters.
     *
     * @param request - The request {@link ListNamespacesRequest}
     * @returns A Promise of ListNamespacesResponse
     */
    listNamespaces: (request?: Readonly<ListNamespacesRequest>) => Promise<ListNamespacesResponse> & {
        all: () => Promise<Namespace[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Namespace[], void, void>;
    };
    /**
     * Get a namespace. Retrieve information about a given namespace, specified by its `namespace_id` and region. Full details about the namespace, such as `description`, `project_id`, `status`, `endpoint`, `is_public`, `size`, and `image_count` are returned in the response.
     *
     * @param request - The request {@link GetNamespaceRequest}
     * @returns A Promise of Namespace
     */
    getNamespace: (request: Readonly<GetNamespaceRequest>) => Promise<Namespace>;
    /**
     * Waits for {@link Namespace} to be in a final state.
     *
     * @param request - The request {@link GetNamespaceRequest}
     * @param options - The waiting options
     * @returns A Promise of Namespace
     */
    waitForNamespace: (request: Readonly<GetNamespaceRequest>, options?: Readonly<WaitForOptions<Namespace>>) => Promise<Namespace>;
    /**
     * Create a namespace. Create a new Container Registry namespace. You must specify the namespace name and region in which you want it to be created. Optionally, you can specify the `project_id` and `is_public` in the request payload.
     *
     * @param request - The request {@link CreateNamespaceRequest}
     * @returns A Promise of Namespace
     */
    createNamespace: (request: Readonly<CreateNamespaceRequest>) => Promise<Namespace>;
    /**
     * Update a namespace. Update the parameters of a given namespace, specified by its `namespace_id` and `region`. You can update the `description` and `is_public` parameters.
     *
     * @param request - The request {@link UpdateNamespaceRequest}
     * @returns A Promise of Namespace
     */
    updateNamespace: (request: Readonly<UpdateNamespaceRequest>) => Promise<Namespace>;
    /**
     * Delete a namespace. Delete a given namespace. You must specify, in the endpoint, the `region` and `namespace_id` parameters of the namespace you want to delete.
     *
     * @param request - The request {@link DeleteNamespaceRequest}
     * @returns A Promise of Namespace
     */
    deleteNamespace: (request: Readonly<DeleteNamespaceRequest>) => Promise<Namespace>;
    protected pageOfListImages: (request?: Readonly<ListImagesRequest>) => Promise<ListImagesResponse>;
    /**
     * List images. List all images in a specified region. By default, the images listed are ordered by creation date in ascending order. This can be modified via the order_by field. You can also define additional parameters for your query, such as the `namespace_id` and `project_id` parameters.
     *
     * @param request - The request {@link ListImagesRequest}
     * @returns A Promise of ListImagesResponse
     */
    listImages: (request?: Readonly<ListImagesRequest>) => Promise<ListImagesResponse> & {
        all: () => Promise<Image[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Image[], void, void>;
    };
    /**
     * Get an image. Retrieve information about a given container image, specified by its `image_id` and region. Full details about the image, such as `name`, `namespace_id`, `status`, `visibility`, and `size` are returned in the response.
     *
     * @param request - The request {@link GetImageRequest}
     * @returns A Promise of Image
     */
    getImage: (request: Readonly<GetImageRequest>) => Promise<Image>;
    /**
     * Waits for {@link Image} to be in a final state.
     *
     * @param request - The request {@link GetImageRequest}
     * @param options - The waiting options
     * @returns A Promise of Image
     */
    waitForImage: (request: Readonly<GetImageRequest>, options?: Readonly<WaitForOptions<Image>>) => Promise<Image>;
    /**
     * Update an image. Update the parameters of a given image, specified by its `image_id` and `region`. You can update the `visibility` parameter.
     *
     * @param request - The request {@link UpdateImageRequest}
     * @returns A Promise of Image
     */
    updateImage: (request: Readonly<UpdateImageRequest>) => Promise<Image>;
    /**
     * Delete an image. Delete a given image. You must specify, in the endpoint, the `region` and `image_id` parameters of the image you want to delete.
     *
     * @param request - The request {@link DeleteImageRequest}
     * @returns A Promise of Image
     */
    deleteImage: (request: Readonly<DeleteImageRequest>) => Promise<Image>;
    protected pageOfListTags: (request: Readonly<ListTagsRequest>) => Promise<ListTagsResponse>;
    /**
     * List tags. List all tags for a given image, specified by region. By default, the tags listed are ordered by creation date in ascending order. This can be modified via the order_by field. You can also define additional parameters for your query, such as the `name`.
     *
     * @param request - The request {@link ListTagsRequest}
     * @returns A Promise of ListTagsResponse
     */
    listTags: (request: Readonly<ListTagsRequest>) => Promise<ListTagsResponse> & {
        all: () => Promise<Tag[]>;
        [Symbol.asyncIterator]: () => AsyncGenerator<Tag[], void, void>;
    };
    /**
     * Get a tag. Retrieve information about a given image tag, specified by its `tag_id` and region. Full details about the tag, such as `name`, `image_id`, `status`, and `digest` are returned in the response.
     *
     * @param request - The request {@link GetTagRequest}
     * @returns A Promise of Tag
     */
    getTag: (request: Readonly<GetTagRequest>) => Promise<Tag>;
    /**
     * Waits for {@link Tag} to be in a final state.
     *
     * @param request - The request {@link GetTagRequest}
     * @param options - The waiting options
     * @returns A Promise of Tag
     */
    waitForTag: (request: Readonly<GetTagRequest>, options?: Readonly<WaitForOptions<Tag>>) => Promise<Tag>;
    /**
     * Delete a tag. Delete a given image tag. You must specify, in the endpoint, the `region` and `tag_id` parameters of the tag you want to delete.
     *
     * @param request - The request {@link DeleteTagRequest}
     * @returns A Promise of Tag
     */
    deleteTag: (request: Readonly<DeleteTagRequest>) => Promise<Tag>;
}
