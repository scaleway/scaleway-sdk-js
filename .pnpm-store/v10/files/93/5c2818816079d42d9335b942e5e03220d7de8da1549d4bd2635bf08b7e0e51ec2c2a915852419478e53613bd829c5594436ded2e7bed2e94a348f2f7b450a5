import randomName from "@scaleway/random-name";
import { resolveOneOf, isJSONObject, unmarshalMapOfObject, unmarshalArrayOfObject, unmarshalDate } from "@scaleway/sdk-client";
const unmarshalPrivateNIC = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNIC' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    macAddress: data.mac_address,
    privateNetworkId: data.private_network_id,
    serverId: data.server_id,
    state: data.state,
    tags: data.tags
  };
};
const unmarshalServerSummary = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalBootscript = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Bootscript' failed as data isn't a dictionary.`
    );
  }
  return {
    architecture: data.architecture,
    bootcmdargs: data.bootcmdargs,
    default: data.default,
    dtb: data.dtb,
    id: data.id,
    initrd: data.initrd,
    kernel: data.kernel,
    organization: data.organization,
    project: data.project,
    public: data.public,
    title: data.title,
    zone: data.zone
  };
};
const unmarshalVolume = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    creationDate: unmarshalDate(data.creation_date),
    exportUri: data.export_uri,
    id: data.id,
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    size: data.size,
    state: data.state,
    tags: data.tags,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalVolumeSummary = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    size: data.size,
    volumeType: data.volume_type
  };
};
const unmarshalImage = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`
    );
  }
  return {
    arch: data.arch,
    creationDate: unmarshalDate(data.creation_date),
    defaultBootscript: data.default_bootscript ? unmarshalBootscript(data.default_bootscript) : void 0,
    extraVolumes: unmarshalMapOfObject(data.extra_volumes, unmarshalVolume),
    fromServer: data.from_server,
    id: data.id,
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    public: data.public,
    rootVolume: data.root_volume ? unmarshalVolumeSummary(data.root_volume) : void 0,
    state: data.state,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalPlacementGroup = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PlacementGroup' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    organization: data.organization,
    policyMode: data.policy_mode,
    policyRespected: data.policy_respected,
    policyType: data.policy_type,
    project: data.project,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalSecurityGroupSummary = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroupSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalServerFilesystem = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerFilesystem' failed as data isn't a dictionary.`
    );
  }
  return {
    filesystemId: data.filesystem_id,
    state: data.state
  };
};
const unmarshalServerIp = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerIp' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    dynamic: data.dynamic,
    family: data.family,
    gateway: data.gateway,
    id: data.id,
    ipamId: data.ipam_id,
    netmask: data.netmask,
    provisioningMode: data.provisioning_mode,
    state: data.state,
    tags: data.tags
  };
};
const unmarshalServerIpv6 = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerIpv6' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    gateway: data.gateway,
    netmask: data.netmask
  };
};
const unmarshalServerLocation = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerLocation' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterId: data.cluster_id,
    hypervisorId: data.hypervisor_id,
    nodeId: data.node_id,
    platformId: data.platform_id,
    zoneId: data.zone_id
  };
};
const unmarshalServerMaintenance = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerMaintenance' failed as data isn't a dictionary.`
    );
  }
  return {
    reason: data.reason,
    startDate: unmarshalDate(data.start_date)
  };
};
const unmarshalVolumeServer = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeServer' failed as data isn't a dictionary.`
    );
  }
  return {
    boot: data.boot,
    creationDate: unmarshalDate(data.creation_date),
    exportUri: data.export_uri,
    id: data.id,
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    size: data.size,
    state: data.state ? data.state : void 0,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalServer = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`
    );
  }
  return {
    adminPasswordEncryptedValue: data.admin_password_encrypted_value,
    adminPasswordEncryptionSshKeyId: data.admin_password_encryption_ssh_key_id,
    allowedActions: data.allowed_actions,
    arch: data.arch,
    bootType: data.boot_type,
    commercialType: data.commercial_type,
    creationDate: unmarshalDate(data.creation_date),
    dynamicIpRequired: data.dynamic_ip_required,
    enableIpv6: data.enable_ipv6,
    endOfService: data.end_of_service,
    filesystems: unmarshalArrayOfObject(
      data.filesystems,
      unmarshalServerFilesystem
    ),
    hostname: data.hostname,
    id: data.id,
    image: data.image ? unmarshalImage(data.image) : void 0,
    ipv6: data.ipv6 ? unmarshalServerIpv6(data.ipv6) : void 0,
    location: data.location ? unmarshalServerLocation(data.location) : void 0,
    macAddress: data.mac_address,
    maintenances: unmarshalArrayOfObject(
      data.maintenances,
      unmarshalServerMaintenance
    ),
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0,
    privateIp: data.private_ip,
    privateNics: unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),
    project: data.project,
    protected: data.protected,
    publicIp: data.public_ip ? unmarshalServerIp(data.public_ip) : void 0,
    publicIps: unmarshalArrayOfObject(data.public_ips, unmarshalServerIp),
    routedIpEnabled: data.routed_ip_enabled,
    securityGroup: data.security_group ? unmarshalSecurityGroupSummary(data.security_group) : void 0,
    state: data.state,
    stateDetail: data.state_detail,
    tags: data.tags,
    volumes: unmarshalMapOfObject(data.volumes, unmarshalVolumeServer),
    zone: data.zone
  };
};
const unmarshalAttachServerFileSystemResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AttachServerFileSystemResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalAttachServerVolumeResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AttachServerVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalCreateImageResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalIp = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Ip' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    id: data.id,
    ipamId: data.ipam_id,
    organization: data.organization,
    prefix: data.prefix,
    project: data.project,
    reverse: data.reverse,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    state: data.state,
    tags: data.tags,
    type: data.type,
    zone: data.zone
  };
};
const unmarshalCreateIpResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalCreatePlacementGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreatePlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalCreatePrivateNICResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreatePrivateNICResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0
  };
};
const unmarshalSecurityGroup = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroup' failed as data isn't a dictionary.`
    );
  }
  return {
    creationDate: unmarshalDate(data.creation_date),
    description: data.description,
    enableDefaultSecurity: data.enable_default_security,
    id: data.id,
    inboundDefaultPolicy: data.inbound_default_policy,
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    organizationDefault: data.organization_default,
    outboundDefaultPolicy: data.outbound_default_policy,
    project: data.project,
    projectDefault: data.project_default,
    servers: unmarshalArrayOfObject(data.servers, unmarshalServerSummary),
    state: data.state,
    stateful: data.stateful,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalCreateSecurityGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalSecurityGroupRule = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroupRule' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    destPortFrom: data.dest_port_from,
    destPortTo: data.dest_port_to,
    direction: data.direction,
    editable: data.editable,
    id: data.id,
    ipRange: data.ip_range,
    position: data.position,
    protocol: data.protocol,
    zone: data.zone
  };
};
const unmarshalCreateSecurityGroupRuleResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalCreateServerResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalSnapshotBaseVolume = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotBaseVolume' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalSnapshot = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    baseVolume: data.base_volume ? unmarshalSnapshotBaseVolume(data.base_volume) : void 0,
    creationDate: unmarshalDate(data.creation_date),
    errorReason: data.error_reason,
    id: data.id,
    modificationDate: unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    size: data.size,
    state: data.state,
    tags: data.tags,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalTask = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Task' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    hrefFrom: data.href_from,
    hrefResult: data.href_result,
    id: data.id,
    progress: data.progress,
    startedAt: unmarshalDate(data.started_at),
    status: data.status,
    terminatedAt: unmarshalDate(data.terminated_at),
    zone: data.zone
  };
};
const unmarshalCreateSnapshotResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0,
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalCreateVolumeResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalDetachServerFileSystemResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DetachServerFileSystemResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalDetachServerVolumeResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DetachServerVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalExportSnapshotResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExportSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalDashboard = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Dashboard' failed as data isn't a dictionary.`
    );
  }
  return {
    imagesCount: data.images_count,
    ipsCount: data.ips_count,
    ipsUnused: data.ips_unused,
    placementGroupsCount: data.placement_groups_count,
    privateNicsCount: data.private_nics_count,
    runningServersCount: data.running_servers_count,
    securityGroupsCount: data.security_groups_count,
    serversByTypes: data.servers_by_types,
    serversCount: data.servers_count,
    snapshotsCount: data.snapshots_count,
    volumesBSsdCount: data.volumes_b_ssd_count,
    volumesBSsdTotalSize: data.volumes_b_ssd_total_size,
    volumesCount: data.volumes_count,
    volumesLSsdCount: data.volumes_l_ssd_count,
    volumesLSsdTotalSize: data.volumes_l_ssd_total_size
  };
};
const unmarshalGetDashboardResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDashboardResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboard: data.dashboard ? unmarshalDashboard(data.dashboard) : void 0
  };
};
const unmarshalGetImageResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalGetIpResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalGetPlacementGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalPlacementGroupServer = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PlacementGroupServer' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    policyRespected: data.policy_respected
  };
};
const unmarshalGetPlacementGroupServersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalGetPrivateNICResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPrivateNICResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0
  };
};
const unmarshalGetSecurityGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalGetSecurityGroupRuleResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalGetServerResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalGetServerTypesAvailabilityResponseAvailability = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerTypesAvailabilityResponseAvailability' failed as data isn't a dictionary.`
    );
  }
  return {
    availability: data.availability
  };
};
const unmarshalGetServerTypesAvailabilityResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerTypesAvailabilityResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalMapOfObject(
      data.servers,
      unmarshalGetServerTypesAvailabilityResponseAvailability
    ),
    totalCount: data.total_count
  };
};
const unmarshalGetSnapshotResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalGetVolumeResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalListImagesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    images: unmarshalArrayOfObject(data.images, unmarshalImage),
    totalCount: data.total_count
  };
};
const unmarshalListIpsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: unmarshalArrayOfObject(data.ips, unmarshalIp),
    totalCount: data.total_count
  };
};
const unmarshalListPlacementGroupsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPlacementGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroups: unmarshalArrayOfObject(
      data.placement_groups,
      unmarshalPlacementGroup
    ),
    totalCount: data.total_count
  };
};
const unmarshalListPrivateNICsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivateNICsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNics: unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),
    totalCount: data.total_count
  };
};
const unmarshalListSecurityGroupRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecurityGroupRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule),
    totalCount: data.total_count
  };
};
const unmarshalListSecurityGroupsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecurityGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroups: unmarshalArrayOfObject(
      data.security_groups,
      unmarshalSecurityGroup
    ),
    totalCount: data.total_count
  };
};
const unmarshalListServerActionsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerActionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    actions: data.actions
  };
};
const unmarshalListServerUserDataResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerUserDataResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    userData: data.user_data
  };
};
const unmarshalListServersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const unmarshalServerTypeNetworkInterface = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeNetworkInterface' failed as data isn't a dictionary.`
    );
  }
  return {
    internalBandwidth: data.internal_bandwidth,
    internetBandwidth: data.internet_bandwidth
  };
};
const unmarshalServerTypeVolumeConstraintSizes = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeVolumeConstraintSizes' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSize: data.max_size,
    minSize: data.min_size
  };
};
const unmarshalServerTypeCapabilities = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeCapabilities' failed as data isn't a dictionary.`
    );
  }
  return {
    blockStorage: data.block_storage,
    bootTypes: data.boot_types,
    maxFileSystems: data.max_file_systems
  };
};
const unmarshalServerTypeGPUInfo = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeGPUInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    gpuManufacturer: data.gpu_manufacturer,
    gpuMemory: data.gpu_memory,
    gpuName: data.gpu_name
  };
};
const unmarshalServerTypeNetwork = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    interfaces: unmarshalArrayOfObject(
      data.interfaces,
      unmarshalServerTypeNetworkInterface
    ),
    ipv6Support: data.ipv6_support,
    sumInternalBandwidth: data.sum_internal_bandwidth,
    sumInternetBandwidth: data.sum_internet_bandwidth
  };
};
const unmarshalServerTypeVolumeConstraintsByType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeVolumeConstraintsByType' failed as data isn't a dictionary.`
    );
  }
  return {
    lSsd: data.l_ssd ? unmarshalServerTypeVolumeConstraintSizes(data.l_ssd) : void 0
  };
};
const unmarshalServerType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerType' failed as data isn't a dictionary.`
    );
  }
  return {
    altNames: data.alt_names,
    arch: data.arch,
    blockBandwidth: data.block_bandwidth,
    capabilities: data.capabilities ? unmarshalServerTypeCapabilities(data.capabilities) : void 0,
    endOfService: data.end_of_service,
    gpu: data.gpu,
    gpuInfo: data.gpu_info ? unmarshalServerTypeGPUInfo(data.gpu_info) : void 0,
    hourlyPrice: data.hourly_price,
    monthlyPrice: data.monthly_price,
    ncpus: data.ncpus,
    network: data.network ? unmarshalServerTypeNetwork(data.network) : void 0,
    perVolumeConstraint: data.per_volume_constraint ? unmarshalServerTypeVolumeConstraintsByType(data.per_volume_constraint) : void 0,
    ram: data.ram,
    scratchStorageMaxSize: data.scratch_storage_max_size,
    volumesConstraint: data.volumes_constraint ? unmarshalServerTypeVolumeConstraintSizes(data.volumes_constraint) : void 0
  };
};
const unmarshalListServersTypesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalMapOfObject(data.servers, unmarshalServerType),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListVolumesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: unmarshalArrayOfObject(data.volumes, unmarshalVolume)
  };
};
const unmarshalVolumeTypeCapabilities = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeTypeCapabilities' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot
  };
};
const unmarshalVolumeTypeConstraints = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeTypeConstraints' failed as data isn't a dictionary.`
    );
  }
  return {
    max: data.max,
    min: data.min
  };
};
const unmarshalVolumeType = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    capabilities: data.capabilities ? unmarshalVolumeTypeCapabilities(data.capabilities) : void 0,
    constraints: data.constraints ? unmarshalVolumeTypeConstraints(data.constraints) : void 0,
    displayName: data.display_name
  };
};
const unmarshalListVolumesTypesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: unmarshalMapOfObject(data.volumes, unmarshalVolumeType)
  };
};
const unmarshalMigrationPlan = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'MigrationPlan' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    validationKey: data.validation_key,
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalServerActionResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerActionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalServerCompatibleTypes = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerCompatibleTypes' failed as data isn't a dictionary.`
    );
  }
  return {
    compatibleTypes: data.compatible_types
  };
};
const unmarshalSetImageResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalSetPlacementGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetPlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalSetPlacementGroupServersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetPlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalSetSecurityGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalSetSecurityGroupRuleResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalSetSecurityGroupRulesResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule)
  };
};
const unmarshalSetServerResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalSetSnapshotResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalUpdateImageResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalUpdateIpResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalUpdatePlacementGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdatePlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalUpdatePlacementGroupServersResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdatePlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalUpdateSecurityGroupResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalUpdateSecurityGroupRuleResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalUpdateServerResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalUpdateSnapshotResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalUpdateVolumeResponse = (data) => {
  if (!isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const marshalApplyBlockMigrationRequest = (request, defaults) => ({
  validation_key: request.validationKey,
  ...resolveOneOf([
    { param: "volume_id", value: request.volumeId },
    { param: "snapshot_id", value: request.snapshotId }
  ])
});
const marshalAttachServerFileSystemRequest = (request, defaults) => ({
  filesystem_id: request.filesystemId
});
const marshalAttachServerVolumeRequest = (request, defaults) => ({
  boot: request.boot,
  volume_id: request.volumeId,
  volume_type: request.volumeType
});
const marshalCheckBlockMigrationOrganizationQuotasRequest = (request, defaults) => ({
  organization: request.organization ?? defaults.defaultOrganizationId
});
const marshalVolumeTemplate = (request, defaults) => ({
  id: request.id,
  name: request.name,
  size: request.size,
  volume_type: request.volumeType,
  ...resolveOneOf([
    { param: "project", value: request.project },
    { param: "organization", value: request.organization }
  ])
});
const marshalCreateImageRequest = (request, defaults) => ({
  arch: request.arch,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeTemplate(value)
    }),
    {}
  ) : void 0,
  name: request.name || randomName("img"),
  public: request.public,
  root_volume: request.rootVolume,
  tags: request.tags,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateIpRequest = (request, defaults) => ({
  server: request.server,
  tags: request.tags,
  type: request.type,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreatePlacementGroupRequest = (request, defaults) => ({
  name: request.name || randomName("pg"),
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  tags: request.tags,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreatePrivateNICRequest = (request, defaults) => ({
  ip_ids: request.ipIds,
  ipam_ip_ids: request.ipamIpIds,
  private_network_id: request.privateNetworkId,
  tags: request.tags
});
const marshalCreateSecurityGroupRequest = (request, defaults) => ({
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  name: request.name || randomName("sg"),
  outbound_default_policy: request.outboundDefaultPolicy,
  stateful: request.stateful,
  tags: request.tags,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ]),
  ...resolveOneOf([
    { param: "organization_default", value: request.organizationDefault },
    { param: "project_default", value: request.projectDefault }
  ])
});
const marshalCreateSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalVolumeServerTemplate = (request, defaults) => ({
  base_snapshot: request.baseSnapshot,
  boot: request.boot,
  id: request.id,
  name: request.name,
  organization: request.organization,
  project: request.project,
  size: request.size,
  volume_type: request.volumeType
});
const marshalCreateServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  boot_type: request.bootType,
  commercial_type: request.commercialType,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  image: request.image,
  name: request.name || randomName("srv"),
  placement_group: request.placementGroup,
  protected: request.protected,
  public_ip: request.publicIp,
  public_ips: request.publicIps,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeServerTemplate(value)
    }),
    {}
  ) : void 0,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key,
  name: request.name || randomName("snp"),
  size: request.size,
  tags: request.tags,
  volume_id: request.volumeId,
  volume_type: request.volumeType,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateVolumeRequest = (request, defaults) => ({
  name: request.name || randomName("vol"),
  tags: request.tags,
  volume_type: request.volumeType,
  ...resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ]),
  ...resolveOneOf([
    { param: "size", value: request.size },
    { param: "base_snapshot", value: request.baseSnapshot }
  ])
});
const marshalDetachServerFileSystemRequest = (request, defaults) => ({
  filesystem_id: request.filesystemId
});
const marshalDetachServerVolumeRequest = (request, defaults) => ({
  volume_id: request.volumeId
});
const marshalExportSnapshotRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key
});
const marshalPlanBlockMigrationRequest = (request, defaults) => ({
  ...resolveOneOf([
    { param: "volume_id", value: request.volumeId },
    { param: "snapshot_id", value: request.snapshotId }
  ])
});
const marshalServerActionRequestVolumeBackupTemplate = (request, defaults) => ({
  volume_type: request.volumeType
});
const marshalServerActionRequest = (request, defaults) => ({
  action: request.action,
  disable_ipv6: request.disableIpv6,
  name: request.name,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalServerActionRequestVolumeBackupTemplate(
        value
      )
    }),
    {}
  ) : void 0
});
const marshalServerSummary = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalBootscript = (request, defaults) => ({
  architecture: request.architecture,
  bootcmdargs: request.bootcmdargs,
  default: request.default,
  dtb: request.dtb,
  id: request.id,
  initrd: request.initrd,
  kernel: request.kernel,
  organization: request.organization,
  project: request.project,
  public: request.public,
  title: request.title,
  zone: request.zone
});
const marshalVolume = (request, defaults) => ({
  creation_date: request.creationDate,
  export_uri: request.exportUri,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization,
  project: request.project,
  server: request.server !== void 0 ? marshalServerSummary(request.server) : void 0,
  size: request.size,
  state: request.state,
  tags: request.tags,
  volume_type: request.volumeType,
  zone: request.zone
});
const marshalVolumeSummary = (request, defaults) => ({
  id: request.id,
  name: request.name,
  size: request.size,
  volume_type: request.volumeType
});
const marshalSetImageRequest = (request, defaults) => ({
  arch: request.arch,
  creation_date: request.creationDate,
  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolume(value)
    }),
    {}
  ) : void 0,
  from_server: request.fromServer,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  project: request.project ?? defaults.defaultProjectId,
  public: request.public,
  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,
  state: request.state,
  tags: request.tags
});
const marshalSetPlacementGroupRequest = (request, defaults) => ({
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  project: request.project ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalSetPlacementGroupServersRequest = (request, defaults) => ({
  servers: request.servers
});
const marshalSetSecurityGroupRequest = (request, defaults) => ({
  creation_date: request.creationDate,
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  organization_default: request.organizationDefault,
  outbound_default_policy: request.outboundDefaultPolicy,
  project: request.project ?? defaults.defaultProjectId,
  project_default: request.projectDefault,
  servers: request.servers !== void 0 ? request.servers.map((elt) => marshalServerSummary(elt)) : void 0,
  stateful: request.stateful,
  tags: request.tags
});
const marshalSetSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  id: request.id,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalSetSecurityGroupRulesRequestRule = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  id: request.id,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol,
  zone: request.zone
});
const marshalSetSecurityGroupRulesRequest = (request, defaults) => ({
  rules: request.rules !== void 0 ? request.rules.map(
    (elt) => marshalSetSecurityGroupRulesRequestRule(elt)
  ) : void 0
});
const marshalImage = (request, defaults) => ({
  arch: request.arch,
  creation_date: request.creationDate,
  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,
  extra_volumes: Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({ ...acc, [key]: marshalVolume(value) }),
    {}
  ),
  from_server: request.fromServer,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization,
  project: request.project,
  public: request.public,
  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,
  state: request.state,
  tags: request.tags,
  zone: request.zone
});
const marshalPlacementGroup = (request, defaults) => ({
  id: request.id,
  name: request.name,
  organization: request.organization,
  policy_mode: request.policyMode,
  policy_respected: request.policyRespected,
  policy_type: request.policyType,
  project: request.project,
  tags: request.tags,
  zone: request.zone
});
const marshalPrivateNIC = (request, defaults) => ({
  id: request.id,
  mac_address: request.macAddress,
  private_network_id: request.privateNetworkId,
  server_id: request.serverId,
  state: request.state,
  tags: request.tags
});
const marshalSecurityGroupSummary = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalServerIp = (request, defaults) => ({
  address: request.address,
  dynamic: request.dynamic,
  family: request.family,
  gateway: request.gateway,
  id: request.id,
  ipam_id: request.ipamId,
  netmask: request.netmask,
  provisioning_mode: request.provisioningMode,
  state: request.state,
  tags: request.tags
});
const marshalServerIpv6 = (request, defaults) => ({
  address: request.address,
  gateway: request.gateway,
  netmask: request.netmask
});
const marshalServerLocation = (request, defaults) => ({
  cluster_id: request.clusterId,
  hypervisor_id: request.hypervisorId,
  node_id: request.nodeId,
  platform_id: request.platformId,
  zone_id: request.zoneId
});
const marshalServerMaintenance = (request, defaults) => ({
  reason: request.reason,
  start_date: request.startDate
});
const marshalSetServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  allowed_actions: request.allowedActions !== void 0 ? request.allowedActions : void 0,
  arch: request.arch,
  boot_type: request.bootType,
  commercial_type: request.commercialType,
  creation_date: request.creationDate,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  hostname: request.hostname,
  image: request.image !== void 0 ? marshalImage(request.image) : void 0,
  ipv6: request.ipv6 !== void 0 ? marshalServerIpv6(request.ipv6) : void 0,
  location: request.location !== void 0 ? marshalServerLocation(request.location) : void 0,
  maintenances: request.maintenances !== void 0 ? request.maintenances.map((elt) => marshalServerMaintenance(elt)) : void 0,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  placement_group: request.placementGroup !== void 0 ? marshalPlacementGroup(request.placementGroup) : void 0,
  private_ip: request.privateIp,
  private_nics: request.privateNics !== void 0 ? request.privateNics.map((elt) => marshalPrivateNIC(elt)) : void 0,
  project: request.project ?? defaults.defaultProjectId,
  protected: request.protected,
  public_ip: request.publicIp !== void 0 ? marshalServerIp(request.publicIp) : void 0,
  public_ips: request.publicIps !== void 0 ? request.publicIps.map((elt) => marshalServerIp(elt)) : void 0,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupSummary(request.securityGroup) : void 0,
  state: request.state,
  state_detail: request.stateDetail,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolume(value)
    }),
    {}
  ) : void 0
});
const marshalSnapshotBaseVolume = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalSetSnapshotRequest = (request, defaults) => ({
  base_volume: request.baseVolume !== void 0 ? marshalSnapshotBaseVolume(request.baseVolume) : void 0,
  creation_date: request.creationDate,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  project: request.project ?? defaults.defaultProjectId,
  size: request.size,
  state: request.state,
  tags: request.tags,
  volume_type: request.volumeType
});
const marshalVolumeImageUpdateTemplate = (request, defaults) => ({
  id: request.id
});
const marshalUpdateImageRequest = (request, defaults) => ({
  arch: request.arch,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeImageUpdateTemplate(value)
    }),
    {}
  ) : void 0,
  name: request.name,
  public: request.public,
  tags: request.tags
});
const marshalUpdateIpRequest = (request, defaults) => ({
  reverse: request.reverse,
  server: request.server,
  tags: request.tags,
  type: request.type
});
const marshalUpdatePlacementGroupRequest = (request, defaults) => ({
  name: request.name,
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  tags: request.tags
});
const marshalUpdatePlacementGroupServersRequest = (request, defaults) => ({
  servers: request.servers
});
const marshalUpdatePrivateNICRequest = (request, defaults) => ({
  tags: request.tags
});
const marshalUpdateSecurityGroupRequest = (request, defaults) => ({
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  name: request.name,
  organization_default: request.organizationDefault,
  outbound_default_policy: request.outboundDefaultPolicy,
  project_default: request.projectDefault,
  stateful: request.stateful,
  tags: request.tags
});
const marshalUpdateSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalSecurityGroupTemplate = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalUpdateServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  boot_type: request.bootType,
  commercial_type: request.commercialType,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  name: request.name,
  placement_group: request.placementGroup,
  private_nics: request.privateNics,
  protected: request.protected,
  public_ips: request.publicIps,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupTemplate(request.securityGroup) : void 0,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeServerTemplate(value)
    }),
    {}
  ) : void 0
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
const marshalUpdateVolumeRequest = (request, defaults) => ({
  name: request.name,
  size: request.size,
  tags: request.tags
});
export {
  marshalApplyBlockMigrationRequest,
  marshalAttachServerFileSystemRequest,
  marshalAttachServerVolumeRequest,
  marshalCheckBlockMigrationOrganizationQuotasRequest,
  marshalCreateImageRequest,
  marshalCreateIpRequest,
  marshalCreatePlacementGroupRequest,
  marshalCreatePrivateNICRequest,
  marshalCreateSecurityGroupRequest,
  marshalCreateSecurityGroupRuleRequest,
  marshalCreateServerRequest,
  marshalCreateSnapshotRequest,
  marshalCreateVolumeRequest,
  marshalDetachServerFileSystemRequest,
  marshalDetachServerVolumeRequest,
  marshalExportSnapshotRequest,
  marshalPlanBlockMigrationRequest,
  marshalServerActionRequest,
  marshalSetImageRequest,
  marshalSetPlacementGroupRequest,
  marshalSetPlacementGroupServersRequest,
  marshalSetSecurityGroupRequest,
  marshalSetSecurityGroupRuleRequest,
  marshalSetSecurityGroupRulesRequest,
  marshalSetServerRequest,
  marshalSetSnapshotRequest,
  marshalUpdateImageRequest,
  marshalUpdateIpRequest,
  marshalUpdatePlacementGroupRequest,
  marshalUpdatePlacementGroupServersRequest,
  marshalUpdatePrivateNICRequest,
  marshalUpdateSecurityGroupRequest,
  marshalUpdateSecurityGroupRuleRequest,
  marshalUpdateServerRequest,
  marshalUpdateSnapshotRequest,
  marshalUpdateVolumeRequest,
  unmarshalAttachServerFileSystemResponse,
  unmarshalAttachServerVolumeResponse,
  unmarshalCreateImageResponse,
  unmarshalCreateIpResponse,
  unmarshalCreatePlacementGroupResponse,
  unmarshalCreatePrivateNICResponse,
  unmarshalCreateSecurityGroupResponse,
  unmarshalCreateSecurityGroupRuleResponse,
  unmarshalCreateServerResponse,
  unmarshalCreateSnapshotResponse,
  unmarshalCreateVolumeResponse,
  unmarshalDetachServerFileSystemResponse,
  unmarshalDetachServerVolumeResponse,
  unmarshalExportSnapshotResponse,
  unmarshalGetDashboardResponse,
  unmarshalGetImageResponse,
  unmarshalGetIpResponse,
  unmarshalGetPlacementGroupResponse,
  unmarshalGetPlacementGroupServersResponse,
  unmarshalGetPrivateNICResponse,
  unmarshalGetSecurityGroupResponse,
  unmarshalGetSecurityGroupRuleResponse,
  unmarshalGetServerResponse,
  unmarshalGetServerTypesAvailabilityResponse,
  unmarshalGetSnapshotResponse,
  unmarshalGetVolumeResponse,
  unmarshalListImagesResponse,
  unmarshalListIpsResponse,
  unmarshalListPlacementGroupsResponse,
  unmarshalListPrivateNICsResponse,
  unmarshalListSecurityGroupRulesResponse,
  unmarshalListSecurityGroupsResponse,
  unmarshalListServerActionsResponse,
  unmarshalListServerUserDataResponse,
  unmarshalListServersResponse,
  unmarshalListServersTypesResponse,
  unmarshalListSnapshotsResponse,
  unmarshalListVolumesResponse,
  unmarshalListVolumesTypesResponse,
  unmarshalMigrationPlan,
  unmarshalPrivateNIC,
  unmarshalServerActionResponse,
  unmarshalServerCompatibleTypes,
  unmarshalSetImageResponse,
  unmarshalSetPlacementGroupResponse,
  unmarshalSetPlacementGroupServersResponse,
  unmarshalSetSecurityGroupResponse,
  unmarshalSetSecurityGroupRuleResponse,
  unmarshalSetSecurityGroupRulesResponse,
  unmarshalSetServerResponse,
  unmarshalSetSnapshotResponse,
  unmarshalUpdateImageResponse,
  unmarshalUpdateIpResponse,
  unmarshalUpdatePlacementGroupResponse,
  unmarshalUpdatePlacementGroupServersResponse,
  unmarshalUpdateSecurityGroupResponse,
  unmarshalUpdateSecurityGroupRuleResponse,
  unmarshalUpdateServerResponse,
  unmarshalUpdateSnapshotResponse,
  unmarshalUpdateVolumeResponse
};
