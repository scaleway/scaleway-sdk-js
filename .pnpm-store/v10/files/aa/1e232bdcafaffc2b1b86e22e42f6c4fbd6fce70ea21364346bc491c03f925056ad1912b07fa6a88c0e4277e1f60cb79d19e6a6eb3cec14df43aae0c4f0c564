"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sdkClient = require("@scaleway/sdk-client");
const marshalling_gen = require("./marshalling.gen.cjs");
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class PrivateNetworkAPI extends sdkClient.API {
  /**
   * Locality of this API.
   * type âˆˆ {'zone','region','global','unspecified'}
   */
  static LOCALITY = sdkClient.toApiLocality({
    zones: [
      "fr-par-1",
      "fr-par-2",
      "nl-ams-1",
      "nl-ams-2",
      "pl-waw-2",
      "pl-waw-3"
    ]
  });
  /**
   * Add a server to a Private Network. Add an Elastic Metal server to a Private Network.
   *
   * @param request - The request {@link PrivateNetworkApiAddServerPrivateNetworkRequest}
   * @returns A Promise of ServerPrivateNetwork
   */
  addServerPrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrivateNetworkApiAddServerPrivateNetworkRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v3/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private-networks`
    },
    marshalling_gen.unmarshalServerPrivateNetwork
  );
  /**
   * Set multiple Private Networks on a server. Configure multiple Private Networks on an Elastic Metal server.
   *
   * @param request - The request {@link PrivateNetworkApiSetServerPrivateNetworksRequest}
   * @returns A Promise of SetServerPrivateNetworksResponse
   */
  setServerPrivateNetworks = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrivateNetworkApiSetServerPrivateNetworksRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/baremetal/v3/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private-networks`
    },
    marshalling_gen.unmarshalSetServerPrivateNetworksResponse
  );
  pageOfListServerPrivateNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v3/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/server-private-networks`,
      urlParams: sdkClient.urlParams(
        ["ipam_ip_ids", request.ipamIpIds],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_id", request.privateNetworkId],
        ["project_id", request.projectId],
        ["server_id", request.serverId]
      )
    },
    marshalling_gen.unmarshalListServerPrivateNetworksResponse
  );
  /**
   * List the Private Networks of a server. List the Private Networks of an Elastic Metal server.
   *
   * @param request - The request {@link PrivateNetworkApiListServerPrivateNetworksRequest}
   * @returns A Promise of ListServerPrivateNetworksResponse
   */
  listServerPrivateNetworks = (request = {}) => sdkClient.enrichForPagination(
    "serverPrivateNetworks",
    this.pageOfListServerPrivateNetworks,
    request
  );
  /**
   * Delete a Private Network.
   *
   * @param request - The request {@link PrivateNetworkApiDeleteServerPrivateNetworkRequest}
   */
  deleteServerPrivateNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/baremetal/v3/zones/${sdkClient.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${sdkClient.validatePathParam("serverId", request.serverId)}/private-networks/${sdkClient.validatePathParam("privateNetworkId", request.privateNetworkId)}`
  });
}
exports.PrivateNetworkAPI = PrivateNetworkAPI;
