import { appendFileSync, readdirSync, statSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'

const GENERATED_PATH = 'packages_generated'
const OUTPUT_PATH = 'packages/sdk/src/index.gen.ts'

const toPascal = (s: string) =>
  s
    .split(/[_-]/)
    .map(part => part.charAt(0).toUpperCase() + part.slice(1))
    .join('')

const toSlug = (s: string) => s.replace(/_/g, '-')

const services = readdirSync(GENERATED_PATH).filter(folder => {
  const fullPath = join(GENERATED_PATH, folder)

  return statSync(fullPath).isDirectory()
})

const AUTO_GENERATE_MESSAGE = `/**
 * This file is automatically generated
 * PLEASE DO NOT EDIT HERE
 */\n`

let output = ''
let importsOutput = ''

for (const service of services) {
  const slug = toSlug(service)
  const pascal = toPascal(service)
  const srcPath = join(GENERATED_PATH, service, 'src')

  let versions: string[] = []
  try {
    versions = readdirSync(srcPath).filter(vFolder => {
      const vPath = join(srcPath, vFolder)

      return statSync(vPath).isDirectory() && /^v[0-9a-z]+$/i.test(vFolder)
    })
  } catch (err: unknown) {
    throw new Error(
      `Error: missing or unreadable 'src' folder for package '${service}': ${
        err instanceof Error ? err.message : String(err)
      }`,
    )
  }

  writeFileSync(OUTPUT_PATH, AUTO_GENERATE_MESSAGE)

  if (versions.length > 0) {
    const imports: string[] = []
    const versionsImport: string[] = []
    const mappings: string[] = []

    for (const version of versions) {
      const importName = `${pascal}${version}`
      versionsImport.push(`${importName}`)
      mappings.push(`  ${version}: ${importName},`)
    }
    imports.push(`import { ${versionsImport} } from '@scaleway/sdk-${slug}'`)

    importsOutput += `${imports.join('\n')}\n`
    const importedNames = imports
      .map(line => /{ (.*?) }/.exec(line)![1])
      .join(', ')

    output +=
      `/**\n` +
      ` * @deprecated Direct version exports are deprecated. Use the '${pascal}' namespace instead (e.g., ${pascal}.v1).\n` +
      ` */\n`
    output += `export { ${importedNames} }\n`
    output += `export const ${pascal} = {\n${mappings.join('\n')}\n}\n\n`
  }
}
appendFileSync(OUTPUT_PATH, importsOutput)
appendFileSync(
  OUTPUT_PATH,
  "export { createClient, createAdvancedClient } from '@scaleway/sdk-client'\n\n",
)
appendFileSync(OUTPUT_PATH, output)
console.log(`âœ… File generated: ${OUTPUT_PATH}`)
