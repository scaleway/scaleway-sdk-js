import {
  access,
  appendFileSync,
  constants,
  copyFileSync,
  readdirSync,
  readFileSync,
  statSync,
  writeFileSync,
} from 'node:fs'
import { join, resolve } from 'node:path'
import { cwd, exit } from 'node:process'
import type { ParseArgsConfig } from 'node:util'
import { parseArgs } from 'node:util'
import { SDKS } from './constants'
import {
  renderTemplatePackageJson,
  snakeToPascal,
  snakeToSlug,
} from './helpers'

/**
 * This script will add multiple file to each product package:
 * - package.json
 * - vite.config.ts
 * - tsconfig.json
 */

const TEMPLATES = {
  PACKAGE_JSON: join(cwd(), 'scripts/templates', 'package.tmpl'),
  TS_CONFIG: join(cwd(), 'scripts/templates', 'tsconfig.json'),
  TS_CONFIG_BUILD: join(cwd(), 'scripts/templates', 'tsconfig.build.json'),
  VITE_CONFIG: join(cwd(), 'scripts/templates', 'vite.config.ts'),
}

const templateString = readFileSync(TEMPLATES.PACKAGE_JSON, 'utf8')

// npx tsx scripts/generatePackages.ts ) --src="packages_generated"
const options: ParseArgsConfig['options'] = {
  src: {
    type: 'string',
    short: 's',
    default: 'packages_generated',
  },
}

const SOURCE_DIR = 'src'
const DEFAULT_GENERATED_EXPORT_PATH = 'index.gen.ts'

const CUSTOM = {
  /** Std is use for type generation */
  // PRODUCT_EXPORT: new Set(['std']),
  PRODUCT_EXPORT: new Set(['std']),
  PRODUCT_VERSION_EXPORT: new Set([
    '',
    // 'baremetal/v1',
    'instance/v1',
    'k8s/v1',
    // 'lb/v1',
  ]),
}

const AUTO_GENERATE_MESSAGE = `/**
 * This file is automatically generated
 * PLEASE DO NOT EDIT HERE
 */\n`

const { values } = parseArgs({ options, allowPositionals: true })

if (!values.src) {
  console.error('Missing required argument: --src')
  exit(1)
}

const INPUT_PATH_DIR = resolve(cwd(), values.src as string)

const exportProductVersions = ({ productDir }: { productDir: string }) => {
  const fullPath = join(INPUT_PATH_DIR, productDir, SOURCE_DIR)
  const versionDirs = readdirSync(fullPath)

  const pathFile = `${fullPath}/${DEFAULT_GENERATED_EXPORT_PATH}`

  writeFileSync(pathFile, AUTO_GENERATE_MESSAGE)

  console.debug('Export for', productDir, 'versions', versionDirs)
  for (const versionDir of versionDirs) {
    const pathVersion = `${fullPath}/${versionDir}`

    if (statSync(pathVersion).isDirectory()) {
      const exportPath = CUSTOM.PRODUCT_VERSION_EXPORT.has(
        `${productDir}/${versionDir}`,
      )
        ? `./${versionDir}/index`
        : `./${versionDir}/index.gen`

      // appendFileSync(
      //   pathFile,
      //   `\n/** @deprecated in favor of ${snakeToPascal(productDir)}${versionDir}, you can also use the dedicated package */
      //   export * as ${versionDir} from '${exportPath}'`,
      // )
      appendFileSync(
        pathFile,
        `\nexport * as ${snakeToPascal(productDir)}${versionDir} from '${exportPath}'`,
      )
    }
  }
}

/**
 * This function will generate an index.ts with an export of all product. Std is a custom
 * export as it's only serve for types.
 */
const main = () => {
  // eslint-disable-next-line no-unused-vars
  for (const sdk of SDKS) {
    const productsDirs = readdirSync(INPUT_PATH_DIR)

    for (const productDir of productsDirs) {
      const fullPath = join(INPUT_PATH_DIR, productDir)
      if (statSync(fullPath).isDirectory()) {
        if (!CUSTOM.PRODUCT_EXPORT.has(productDir)) {
          const fileName = 'package.json'
          const filePath = join(fullPath, fileName)
          access(filePath, constants.F_OK, err => {
            if (err) {
              console.log(
                `The file ${fileName} does not exist in the ${productDir} directory`,
              )

              const pkg = renderTemplatePackageJson(templateString, {
                name: snakeToSlug(productDir),
              })
              writeFileSync(filePath, JSON.stringify(pkg, null, 2))
            }
            // console.log(`The file ${fileName} exists in the ${productDir} directory`);
          })

          exportProductVersions({ productDir })
          copyFileSync(TEMPLATES.TS_CONFIG, join(fullPath, 'tsconfig.json'))
          copyFileSync(
            TEMPLATES.TS_CONFIG_BUILD,
            join(fullPath, 'tsconfig.build.json'),
          )
          copyFileSync(TEMPLATES.VITE_CONFIG, join(fullPath, 'vite.config.ts'))
        }
      }
    }
  }
}

main()
