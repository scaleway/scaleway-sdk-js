// This file was automatically generated. DO NOT EDIT.
// If you have any remark or suggestion do not hesitate to open an issue.
import type { Money } from '@scaleway/sdk-client'

export type ApplicationType = 'unknown_type' | 'vqe'

export type BookingStatus =
  | 'unknown_status'
  | 'waiting'
  | 'validating'
  | 'validated'
  | 'cancelling'
  | 'cancelled'
  | 'error'

export type JobStatus =
  | 'unknown_status'
  | 'waiting'
  | 'error'
  | 'running'
  | 'completed'
  | 'cancelling'
  | 'cancelled'

export type ListApplicationsRequestOrderBy =
  | 'name_asc'
  | 'name_desc'
  | 'type_asc'
  | 'type_desc'

export type ListBookingsRequestOrderBy =
  | 'created_at_desc'
  | 'created_at_asc'
  | 'started_at_desc'
  | 'started_at_asc'

export type ListJobResultsRequestOrderBy = 'created_at_desc' | 'created_at_asc'

export type ListJobsRequestOrderBy =
  | 'created_at_desc'
  | 'created_at_asc'
  | 'status_asc'
  | 'status_desc'
  | 'platform_name_asc'
  | 'platform_name_desc'
  | 'name_asc'
  | 'name_desc'
  | 'session_name_asc'
  | 'session_name_desc'

export type ListModelsRequestOrderBy = 'created_at_desc' | 'created_at_asc'

export type ListPlatformsRequestOrderBy =
  | 'name_asc'
  | 'name_desc'
  | 'provider_name_asc'
  | 'provider_name_desc'
  | 'type_asc'
  | 'type_desc'
  | 'technology_asc'
  | 'technology_desc'
  | 'backend_name_asc'
  | 'backend_name_desc'

export type ListProcessResultsRequestOrderBy =
  | 'created_at_desc'
  | 'created_at_asc'

export type ListProcessesRequestOrderBy =
  | 'created_at_desc'
  | 'created_at_asc'
  | 'name_asc'
  | 'name_desc'
  | 'started_at_asc'
  | 'started_at_desc'
  | 'status_asc'
  | 'status_desc'

export type ListSessionACLsRequestOrderBy = 'access_asc' | 'access_desc'

export type ListSessionsRequestOrderBy =
  | 'name_asc'
  | 'name_desc'
  | 'started_at_asc'
  | 'started_at_desc'
  | 'status_asc'
  | 'status_desc'
  | 'created_at_desc'
  | 'created_at_asc'

export type PlatformAvailability =
  | 'unknown_availability'
  | 'available'
  | 'shortage'
  | 'scarce'
  | 'maintenance'

export type PlatformTechnology =
  | 'unknown_technology'
  | 'photonic'
  | 'general_purpose'
  | 'trapped_ion'
  | 'superconducting'
  | 'neutral_atom'

export type PlatformType = 'unknown_type' | 'simulator' | 'qpu'

export type ProcessStatus =
  | 'unknown_status'
  | 'error'
  | 'starting'
  | 'running'
  | 'completed'
  | 'cancelling'
  | 'cancelled'

export type SessionAccess =
  | 'unknown_access'
  | 'full'
  | 'read_session'
  | 'read_write_session'
  | 'read_job_result'
  | 'read_job_circuit'
  | 'read_job'
  | 'read_write_job'

export type SessionOriginType = 'unknown_origin_type' | 'customer' | 'process'

export type SessionStatus =
  | 'unknown_status'
  | 'running'
  | 'stopped'
  | 'starting'
  | 'stopping'

export interface PlatformBookingRequirement {
  /**
   * Minimal duration of any booking based on this platform.
   */
  minDuration?: string
  /**
   * Maximal duration of any bookings based on this platform.
   */
  maxDuration?: string
  /**
   * Allowed time to cancel a booking attached to this platform before the beginning of the session.
   */
  maxCancellationDuration?: string
  /**
   * Allowed planification time from now where the platform can be booked in the future.
   */
  maxPlanificationDuration?: string
  /**
   * Minimum planification time before a platform can be booked.
   */
  minPlanificationDuration?: string
  /**
   * Maximum amount of booking allowed for one organization per week.
   */
  maxBookingPerWeek: number
  /**
   * Maximum amount of booking allowed for one organization per day.
   */
  maxBookingPerDay: number
}

export interface PlatformHardware {
  /**
   * Product name of the hardware.
   */
  name: string
  /**
   * Number of vCPUs available.
   */
  vcpus: number
  /**
   * Number of GPUs available (0 if no GPU).
   */
  gpus: number
  /**
   * Network topology of GPUs (PCIe, NVLink...).
   */
  gpusNetwork: string
  /**
   * Amount of RAM available in byte.
   */
  ram: number
  /**
   * Amount of VRAM available in byte (0 if no GPU).
   */
  vram: number
}

export interface JobCircuit {
  /**
   * Circuit generated by Perceval that should be executed.
   *
   * One-of ('circuitSerialization'): at most one of 'percevalCircuit', 'qiskitCircuit' could be set.
   */
  percevalCircuit?: string
  /**
   * Circuit generated by Qiskit that should be executed.
   *
   * One-of ('circuitSerialization'): at most one of 'percevalCircuit', 'qiskitCircuit' could be set.
   */
  qiskitCircuit?: string
}

export interface CreateSessionRequestBookingDemand {
  startedAt?: Date
  finishedAt?: Date
  description?: string
  timeZone?: string
}

export interface Application {
  /**
   * Unique ID of the application.
   */
  id: string
  /**
   * Name of the application.
   */
  name: string
  /**
   * Type of the application.
   */
  type: ApplicationType
  /**
   * List of compatible platform (by IDs) able to run this application.
   */
  compatiblePlatformIds: string[]
  /**
   * JSON format describing the expected input.
   */
  inputTemplate: string
}

export interface Booking {
  /**
   * Unique ID of the booking.
   */
  id: string
  /**
   * Time at which the booking was created.
   */
  createdAt?: Date
  /**
   * Time at which the booking starts.
   */
  startedAt?: Date
  /**
   * Time at which the booking was updated.
   */
  updatedAt?: Date
  /**
   * Time at which the booking finishes.
   */
  finishedAt?: Date
  /**
   * Status of the booking.
   */
  status: BookingStatus
  /**
   * Description of the booking slot.
   */
  description: string
  /**
   * Any progress message of the booking.
   */
  progressMessage: string
  /**
   * Time zone for the booking schedule, in tz database format (e.g. 'Europe/Paris').
   */
  timeZone?: string
}

export interface JobResult {
  /**
   * ID of the parent job.
   */
  jobId: string
  /**
   * Result in JSON format.
   */
  result?: string
  /**
   * URL to download a large result (optional).
   */
  url?: string
  /**
   * Creation time of the result.
   */
  createdAt?: Date
}

export interface Job {
  /**
   * Unique ID of the job.
   */
  id: string
  /**
   * Job name.
   */
  name: string
  /**
   * Tags of the job.
   */
  tags?: string[]
  /**
   * Session ID in which the job is executed.
   */
  sessionId: string
  /**
   * Time at which the job was created.
   */
  createdAt?: Date
  /**
   * Time at which the job was started.
   */
  startedAt?: Date
  /**
   * Time at which the job was updated.
   */
  updatedAt?: Date
  /**
   * Job status.
   */
  status: JobStatus
  /**
   * Last progress message, if the job has started.
   */
  progressMessage?: string
  /**
   * Duration of the job, if the job is finished.
   */
  jobDuration?: string
  /**
   * Result of the job, if the job is finished.
   */
  resultDistribution?: string
  /**
   * Computation model ID executed by the job.
   */
  modelId?: string
  /**
   * Execution parameters for this job.
   */
  parameters?: string
}

export interface Model {
  /**
   * Unique ID of the model.
   */
  id: string
  /**
   * Time at which the model was created.
   */
  createdAt?: Date
  /**
   * Storage URL of the model.
   */
  url?: string
  /**
   * Project ID in which the model has been created.
   */
  projectId: string
}

export interface Platform {
  /**
   * Unique ID of the platform.
   */
  id: string
  /**
   * Version of the platform.
   */
  version: string
  /**
   * Name of the platform.
   */
  name: string
  /**
   * Provider name of the platform.
   */
  providerName: string
  /**
   * Name of the running backend over the platform (ascella, qsim, aer...).
   */
  backendName: string
  /**
   * Type of the platform.
   */
  type: PlatformType
  /**
   * Technology used by the platform.
   */
  technology: PlatformTechnology
  /**
   * Estimated maximum number of qubits supported by the platform.
   */
  maxQubitCount: number
  /**
   * Maximum number of shots during a circuit execution.
   */
  maxShotCount: number
  /**
   * Maximum number of circuit that can be executed in one call.
   */
  maxCircuitCount: number
  /**
   * Availability of the platform.
   */
  availability: PlatformAvailability
  /**
   * Metadata provided by the platform.
   */
  metadata: string
  /**
   * Price to be paid per hour (excluding free tiers).
   */
  pricePerHour?: Money
  /**
   * Price to be paid per shot (excluding free tiers).
   */
  pricePerShot?: Money
  /**
   * Price to be paid per circuit setup before its execution (excluding free tiers).
   */
  pricePerCircuit?: Money
  /**
   * Specifications of the underlying hardware.
   */
  hardware?: PlatformHardware
  /**
   * Booking constraints to fit if the platform is bookable.
   */
  bookingRequirement?: PlatformBookingRequirement
  /**
   * English description of the platform.
   */
  description: string
  /**
   * Documentation link to external documentation to learn more on this platform.
   */
  documentationUrl: string
  /**
   * Specify if the platform is bookable.
   */
  isBookable: boolean
}

export interface ProcessResult {
  /**
   * ID of the parent process.
   */
  processId: string
  /**
   * Result in JSON format.
   */
  result: string
  /**
   * Creation time of the result.
   */
  createdAt?: Date
}

export interface Process {
  /**
   * Unique ID of the process.
   */
  id: string
  /**
   * Name of the process.
   */
  name: string
  /**
   * Application ID for which the process has been created.
   */
  applicationId?: string
  /**
   * Platform ID for which the process has been created.
   */
  platformId?: string
  /**
   * List of sessions generated by the process.
   */
  attachedSessionIds: string[]
  /**
   * Time at which the process was created.
   */
  createdAt?: Date
  /**
   * Time at which the process started.
   */
  startedAt?: Date
  /**
   * Time at which the process was updated.
   */
  updatedAt?: Date
  /**
   * Time at which the process was finished.
   */
  finishedAt?: Date
  /**
   * Status of the process.
   */
  status: ProcessStatus
  /**
   * Project ID in which the process has been created.
   */
  projectId: string
  /**
   * Tags of the process.
   */
  tags: string[]
  /**
   * Progress of the process, from 0 to 1.
   */
  progress?: number
  /**
   * Any progress of the process.
   */
  progressMessage?: string
  /**
   * Input payload of the process as JSON string.
   */
  input?: string
}

export interface Session {
  /**
   * Unique ID of the session.
   */
  id: string
  /**
   * Name of the session.
   */
  name: string
  /**
   * Platform ID for which the session has been created.
   */
  platformId: string
  /**
   * The time at which the session was created.
   */
  createdAt?: Date
  /**
   * The time at which the session started.
   */
  startedAt?: Date
  /**
   * The time at which the session was updated.
   */
  updatedAt?: Date
  /**
   * The time at which the session was terminated.
   */
  terminatedAt?: Date
  /**
   * Maximum idle time before the session ends.
   */
  maxIdleDuration?: string
  /**
   * Maximum duration before the session ends.
   */
  maxDuration?: string
  /**
   * Number of waiting jobs linked to the session.
   */
  waitingJobCount: number
  /**
   * Number of finished jobs linked to the session.
   */
  finishedJobCount: number
  /**
   * Status of the session.
   */
  status: SessionStatus
  /**
   * Project ID in which the session has been created.
   */
  projectId: string
  /**
   * Tags of the session.
   */
  tags?: string[]
  /**
   * Deduplication ID of the session.
   */
  deduplicationId: string
  /**
   * Resource type that creates the session.
   */
  originType: SessionOriginType
  /**
   * Unique ID of the session's origin resource (if exists).
   */
  originId?: string
  /**
   * Any progress of the session.
   */
  progressMessage?: string
  /**
   * An optional booking unique ID of an attached booking.
   */
  bookingId?: string
  /**
   * Default computation model ID to be executed by job assigned to this session.
   */
  modelId?: string
  /**
   * Platform configuration parameters applied to this session.
   */
  parameters?: string
}

export type CancelJobRequest = {
  /**
   * Unique ID of the job.
   */
  jobId: string
}

export type CancelProcessRequest = {
  /**
   * Unique ID of the process.
   */
  processId: string
}

export type CreateJobRequest = {
  /**
   * Name of the job.
   */
  name: string
  /**
   * Tags of the job.
   */
  tags?: string[]
  /**
   * Session in which the job is executed.
   */
  sessionId: string
  /**
   * Quantum circuit that should be executed.
   */
  circuit: JobCircuit
  /**
   * Maximum duration of the job.
   */
  maxDuration?: string
  /**
   * Computation model ID to be executed by the job.
   */
  modelId?: string
  /**
   * Execution parameters for this job.
   */
  parameters?: string
}

export type CreateModelRequest = {
  /**
   * Project ID to attach this model.
   */
  projectId?: string
  /**
   * The serialized model data.
   */
  payload?: string
}

export type CreateProcessRequest = {
  /**
   * ID of the project in which the process was created.
   */
  projectId?: string
  /**
   * ID of the platform for which the process was created.
   */
  platformId?: string
  /**
   * ID of the application for which the process was created.
   */
  applicationId?: string
  /**
   * Name of the process.
   */
  name: string
  /**
   * Process parameters in JSON format.
   */
  input?: string
  /**
   * Tags of the process.
   */
  tags?: string[]
}

export type CreateSessionRequest = {
  /**
   * ID of the Project in which the session was created.
   */
  projectId?: string
  /**
   * ID of the Platform for which the session was created.
   */
  platformId: string
  /**
   * Name of the session.
   */
  name?: string
  /**
   * Maximum idle duration before the session ends.
   */
  maxIdleDuration?: string
  /**
   * Maximum duration before the session ends.
   */
  maxDuration?: string
  /**
   * Tags of the session.
   */
  tags?: string[]
  /**
   * Deduplication ID of the session.
   */
  deduplicationId?: string
  /**
   * A booking demand to schedule the session, only applicable if the platform is bookable.
   */
  bookingDemand?: CreateSessionRequestBookingDemand
  /**
   * Default computation model ID to be executed by job assigned to this session.
   */
  modelId?: string
  /**
   * Optional platform configuration parameters applied to this session.
   */
  parameters?: string
}

export type DeleteJobRequest = {
  /**
   * Unique ID of the job.
   */
  jobId: string
}

export type DeleteProcessRequest = {
  /**
   * Unique ID of the process.
   */
  processId: string
}

export type DeleteSessionRequest = {
  /**
   * Unique ID of the session.
   */
  sessionId: string
}

export type GetApplicationRequest = {
  /**
   * Unique ID of the application.
   */
  applicationId: string
}

export type GetBookingRequest = {
  /**
   * Unique ID of the booking.
   */
  bookingId: string
}

export type GetJobCircuitRequest = {
  /**
   * Unique ID of the job.
   */
  jobId: string
}

export type GetJobRequest = {
  /**
   * Unique ID of the job you want to get.
   */
  jobId: string
}

export type GetModelRequest = {
  /**
   * Unique ID of the model.
   */
  modelId: string
}

export type GetPlatformRequest = {
  /**
   * Unique ID of the platform.
   */
  platformId: string
}

export type GetProcessRequest = {
  /**
   * Unique ID of the process.
   */
  processId: string
}

export type GetSessionRequest = {
  /**
   * Unique ID of the session.
   */
  sessionId: string
}

export type ListApplicationsRequest = {
  /**
   * List applications with this name.
   */
  name?: string
  /**
   * List applications with this type.
   */
  applicationType?: ApplicationType
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of applications a to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned applications.
   */
  orderBy?: ListApplicationsRequestOrderBy
}

export interface ListApplicationsResponse {
  /**
   * Total number of applications.
   */
  totalCount: number
  /**
   * List of applications.
   */
  applications: Application[]
}

export type ListBookingsRequest = {
  /**
   * List bookings belonging to this project ID.
   */
  projectId?: string
  /**
   * List bookings attached to this platform ID.
   */
  platformId?: string
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of results to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned results.
   */
  orderBy?: ListBookingsRequestOrderBy
}

export interface ListBookingsResponse {
  /**
   * Total number of bookings.
   */
  totalCount: number
  /**
   * List of bookings.
   */
  bookings: Booking[]
}

export type ListJobResultsRequest = {
  /**
   * ID of the job.
   */
  jobId: string
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of results to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned results.
   */
  orderBy?: ListJobResultsRequestOrderBy
}

export interface ListJobResultsResponse {
  /**
   * Total number of results.
   */
  totalCount: number
  /**
   * List of results.
   */
  jobResults: JobResult[]
}

export type ListJobsRequest = {
  /**
   * List jobs with this session ID.
   *
   * One-of ('resourceId'): at most one of 'sessionId', 'projectId' could be set.
   */
  sessionId?: string
  /**
   * List jobs with this project ID.
   *
   * One-of ('resourceId'): at most one of 'sessionId', 'projectId' could be set.
   */
  projectId?: string
  /**
   * List jobs with these tags.
   */
  tags?: string[]
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of jobs to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned jobs.
   */
  orderBy?: ListJobsRequestOrderBy
}

export interface ListJobsResponse {
  /**
   * Total number of jobs.
   */
  totalCount: number
  /**
   * List of jobs.
   */
  jobs: Job[]
}

export type ListModelsRequest = {
  /**
   * List models belonging to this project ID.
   */
  projectId?: string
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of results to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned results.
   */
  orderBy?: ListModelsRequestOrderBy
}

export interface ListModelsResponse {
  /**
   * Total number of models.
   */
  totalCount: number
  /**
   * List of models.
   */
  models: Model[]
}

export type ListPlatformsRequest = {
  /**
   * List platforms with this provider name.
   */
  providerName?: string
  /**
   * List platforms with this backend name.
   */
  backendName?: string
  /**
   * List platforms with this name.
   */
  name?: string
  /**
   * List platforms with this type.
   */
  platformType?: PlatformType
  /**
   * List platforms with this technology.
   */
  platformTechnology?: PlatformTechnology
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of platforms to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned platforms.
   */
  orderBy?: ListPlatformsRequestOrderBy
}

export interface ListPlatformsResponse {
  /**
   * Total number of platforms.
   */
  totalCount: number
  /**
   * List of platforms.
   */
  platforms: Platform[]
}

export type ListProcessResultsRequest = {
  /**
   * ID of the process.
   */
  processId: string
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of results to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned results.
   */
  orderBy?: ListProcessResultsRequestOrderBy
}

export interface ListProcessResultsResponse {
  /**
   * Total number of results.
   */
  totalCount: number
  /**
   * List of results.
   */
  processResults: ProcessResult[]
}

export type ListProcessesRequest = {
  /**
   * List processes that have been created for this application.
   */
  applicationId?: string
  /**
   * List processes with these tags.
   */
  tags?: string[]
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of processes to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned processes.
   */
  orderBy?: ListProcessesRequestOrderBy
  /**
   * List processes belonging to this project ID.
   */
  projectId?: string
}

export interface ListProcessesResponse {
  /**
   * Total number of processes.
   */
  totalCount: number
  /**
   * List of processes.
   */
  processes: Process[]
}

export type ListSessionACLsRequest = {
  sessionId: string
  page?: number
  pageSize?: number
  orderBy?: ListSessionACLsRequestOrderBy
}

export interface ListSessionACLsResponse {
  totalCount: number
  acls: SessionAccess[]
}

export type ListSessionsRequest = {
  /**
   * List sessions that have been created for this platform.
   */
  platformId?: string
  /**
   * List sessions with these tags.
   */
  tags?: string[]
  /**
   * Page number.
   */
  page?: number
  /**
   * Maximum number of sessions to return per page.
   */
  pageSize?: number
  /**
   * Sort order of the returned sessions.
   */
  orderBy?: ListSessionsRequestOrderBy
  /**
   * List sessions belonging to this project ID.
   */
  projectId?: string
}

export interface ListSessionsResponse {
  /**
   * Total number of sessions.
   */
  totalCount: number
  /**
   * List of sessions.
   */
  sessions: Session[]
}

export type TerminateSessionRequest = {
  /**
   * Unique ID of the session.
   */
  sessionId: string
}

export type UpdateBookingRequest = {
  /**
   * Unique ID of the booking.
   */
  bookingId: string
  /**
   * Description of the booking slot.
   */
  description?: string
}

export type UpdateJobRequest = {
  /**
   * Unique ID of the job.
   */
  jobId: string
  /**
   * Name of the job.
   */
  name?: string
  /**
   * Tags of the job.
   */
  tags?: string[]
}

export type UpdateProcessRequest = {
  /**
   * Unique ID of the process.
   */
  processId: string
  /**
   * Name of the process.
   */
  name?: string
  /**
   * Tags of the process.
   */
  tags?: string[]
}

export type UpdateSessionRequest = {
  /**
   * Unique ID of the session.
   */
  sessionId: string
  /**
   * Name of the session.
   */
  name?: string
  /**
   * Maximum idle duration before the session ends.
   */
  maxIdleDuration?: string
  /**
   * Maximum time before the session ends.
   */
  maxDuration?: string
  /**
   * Tags of the session.
   */
  tags?: string[]
}
